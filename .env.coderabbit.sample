# CodeRabbit Self-Hosted Configuration Sample
# Copy this to .env and fill in your values

# Choose one LLM provider:

# Option 1: OpenAI
LLM_PROVIDER=openai
LLM_TIMEOUT=360000
OPENAI_API_KEYS=<your-openai-key>
OPENAI_BASE_URL=  # Optional: custom endpoint
OPENAI_ORG_ID=    # Optional
OPENAI_PROJECT_ID= # Optional

# Option 2: Azure OpenAI (Recommended for enterprise)
# LLM_PROVIDER=azure-openai
# LLM_TIMEOUT=360000
# AZURE_OPENAI_ENDPOINT=<your-azure-endpoint>
# AZURE_OPENAI_API_KEY=<your-azure-key>
# # Deploy these models for best performance:
# AZURE_GPT41MINI_DEPLOYMENT_NAME=<gpt-4.1-mini-deployment>
# AZURE_O4MINI_DEPLOYMENT_NAME=<o4-mini-deployment>
# AZURE_O3_DEPLOYMENT_NAME=<o3-deployment>
# AZURE_GPT41_DEPLOYMENT_NAME=<gpt-4.1-deployment>  # Optional

# Option 3: AWS Bedrock
# LLM_PROVIDER=bedrock-anthropic
# LLM_TIMEOUT=360000
# AWS_ACCESS_KEY_ID=<your-aws-key>
# AWS_SECRET_ACCESS_KEY=<your-aws-secret>
# AWS_REGION=<your-aws-region>

# Option 4: Anthropic
# LLM_PROVIDER=anthropic
# LLM_TIMEOUT=360000
# ANTHROPIC_API_KEYS=<your-anthropic-key>
# ANTHROPIC_BASE_URL=  # Optional

# OAuth2 Configuration (Optional for enterprise SSO)
# OAUTH2_ENDPOINT=
# OAUTH2_CLIENT_ID=
# OAUTH2_CLIENT_SECRET=
# OAUTH2_SCOPE=

# Proxy Configuration (Optional)
# HTTP_PROXY=
# HTTPS_PROXY=
# NO_PROXY=

# System Configuration
TEMP_PATH=/cache

# Platform Configuration (choose one)
SELF_HOSTED=github

# For GitHub:
GH_WEBHOOK_SECRET=<generate-strong-secret>
GITHUB_HOSTNAME=  # Optional for GitHub Enterprise
GITHUB_APP_CLIENT_ID=<github-app-client-id>
GITHUB_APP_CLIENT_SECRET=<github-app-client-secret>
GITHUB_APP_ID=<github-app-id>
# GITHUB_APP_PEM_FILE expects a single-line flattened PEM certificate.
# To flatten your PEM file:
#   Option 1: Use command: tr -d '\n' < your-key.pem
#   Option 2: Mount the file and use its path: /path/to/your-key.pem
# Example flattened format: -----BEGIN RSA PRIVATE KEY-----MIIEow...rest of key...-----END RSA PRIVATE KEY-----
GITHUB_APP_PEM_FILE=<flattened-pem-content>

# For GitLab:
# SELF_HOSTED=gitlab
# GITLAB_BOT_TOKEN=<personal-access-token>
# GITLAB_WEBHOOK_SECRET=<generate-strong-secret>

# For Azure DevOps:
# SELF_HOSTED=azure-devops
# AZURE_DEVOPS_BOT_TOKEN=<personal-access-token>
# AZURE_DEVOPS_BOT_USERNAME=<bot-username>

# For Bitbucket Server:
# SELF_HOSTED=bitbucket-server
# BITBUCKET_SERVER_URL=<your-bitbucket-url>/rest
# BITBUCKET_SERVER_WEBHOOK_SECRET=<generate-strong-secret>
# BITBUCKET_SERVER_BOT_TOKEN=<personal-access-token>
# BITBUCKET_SERVER_BOT_USERNAME=<bot-username>

# CodeRabbit License
CODERABBIT_LICENSE_KEY=<your-license-key>
CODERABBIT_API_KEY=<your-api-key>

# Features (Recommended: enable all for strict reviews)
ENABLE_METRICS=true
ENABLE_LEARNINGS=true

# Object Storage for learnings (Optional but recommended)
# Examples: s3://bucket/path, gs://bucket/path
OBJECT_STORE_URI=

# Integrations (Optional)
# Jira Integration
JIRA_HOST=
JIRA_PAT=

# Linear Integration
LINEAR_PAT=

# Web Search (for up-to-date information)
ENABLE_WEB_SEARCH=true
PERPLEXITY_API_KEY=

# Docker Run Command:
# docker run --env-file .env --publish 127.0.0.1:8080:8080 us-docker.pkg.dev/coderabbitprod/self-hosted/coderabbit-agent:latest

# Health Check:
# curl 127.0.0.1:8080/health

# Note: For production deployments, consider:
# 1. Using a reverse proxy (nginx, traefik) with SSL
# 2. Implementing proper firewall rules
# 3. Using secrets management (Kubernetes secrets, HashiCorp Vault)
# 4. Setting up monitoring and alerting
# 5. Configuring log aggregation
