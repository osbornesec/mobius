name: Docker Linting

on:
  pull_request:
    paths:
      - 'docker/**'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - '.hadolint.yaml'
      - '.dive-ci.yaml'
  push:
    branches:
      - main
      - develop
    paths:
      - 'docker/**'
      - 'docker-compose*.yml'
      - '.dockerignore'
      - '.hadolint.yaml'
      - '.dive-ci.yaml'

jobs:
  hadolint:
    name: Hadolint Dockerfile Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - docker/backend/Dockerfile
          - docker/frontend/Dockerfile.dev
          - docker/frontend/Dockerfile
    steps:
      - uses: actions/checkout@v4

      - name: Run Hadolint on ${{ matrix.dockerfile }}
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          config: .hadolint.yaml

  docker-compose-validate:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Compose files
        run: |
          # Validate development docker-compose (has defaults)
          echo "Validating docker-compose.yml..."
          docker compose -f docker-compose.yml config > /dev/null

          # Validate production docker-compose with required env vars
          # These are dummy values just for validation - not used in actual deployment
          echo "Validating docker-compose.prod.yml..."
          export POSTGRES_USER="${{ secrets.PROD_POSTGRES_USER || 'ci_validation' }}"
          export POSTGRES_PASSWORD="${{ secrets.PROD_POSTGRES_PASSWORD || 'ci_validation_password' }}"
          export REDIS_PASSWORD="${{ secrets.PROD_REDIS_PASSWORD || 'ci_validation_redis_password' }}"
          export QDRANT_API_KEY="${{ secrets.PROD_QDRANT_API_KEY || 'ci_validation_qdrant_key' }}"

          # Additional variables that might be needed
          export POSTGRES_DB="${{ secrets.PROD_POSTGRES_DB || 'mobius' }}"
          export MOBIUS_SECURITY__ALLOWED_ORIGINS="${{ secrets.PROD_MOBIUS_SECURITY__ALLOWED_ORIGINS || 'http://localhost:3000,http://localhost:8000' }}"

          docker compose -f docker-compose.prod.yml config > /dev/null
          echo "âœ“ All docker-compose files validated successfully"

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    # Only run on main branch pushes to avoid building on every PR
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      backend-tag: ${{ steps.tags.outputs.backend-tag }}
      frontend-tag: ${{ steps.tags.outputs.frontend-tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image tags
        id: tags
        run: |
          echo "backend-tag=mobius-backend:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "frontend-tag=mobius-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend/Dockerfile
          tags: mobius-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/backend-image.tar

      - name: Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/frontend/Dockerfile
          tags: mobius-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/frontend-image.tar

      - name: Upload Backend Image
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend-image.tar
          retention-days: 1

      - name: Upload Frontend Image
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend-image.tar
          retention-days: 1

  dive-analysis:
    name: Dive Image Analysis
    runs-on: ubuntu-latest
    needs: build-images
    # Only run on main branch pushes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download Backend Image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Download Frontend Image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp

      - name: Load Docker Images
        run: |
          docker load -i /tmp/backend-image.tar
          docker load -i /tmp/frontend-image.tar

      - name: Run Dive on Backend
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: ${{ needs.build-images.outputs.backend-tag }}
          config: '.dive-ci.yaml'

      - name: Run Dive on Frontend
        uses: yuichielectric/dive-action@0.0.4
        with:
          image: ${{ needs.build-images.outputs.frontend-tag }}
          config: '.dive-ci.yaml'

  security-scan:
    name: Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: build-images
    # Only run on main branch pushes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Download Backend Image
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp

      - name: Download Frontend Image
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp

      - name: Load Docker Images
        run: |
          docker load -i /tmp/backend-image.tar
          docker load -i /tmp/frontend-image.tar

      - name: Run Trivy vulnerability scanner on Backend
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          image-ref: ${{ needs.build-images.outputs.backend-tag }}
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Backend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-backend-results.sarif'
          category: 'backend-container'

      - name: Run Trivy vulnerability scanner on Frontend
        uses: aquasecurity/trivy-action@v0.31.0
        with:
          image-ref: ${{ needs.build-images.outputs.frontend-tag }}
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Frontend Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: 'frontend-container'
