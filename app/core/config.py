"""
Backend configuration module for Mobius Context Platform.

This module provides type-safe configuration management using Pydantic Settings,
supporting environment variables, .env files, and environment-specific configurations.
All environment variables are prefixed with MOBIUS_ for namespace isolation.
"""

import warnings
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field, SecretStr, field_validator, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class DatabaseConfig(BaseModel):
    """
    Database configuration settings.
    
    Handles PostgreSQL and SQLite connection parameters with connection pooling
    settings for optimal performance.
    """
    
    url: str = Field(..., description="Database connection URL")
    pool_size: int = Field(default=10, ge=1, le=100, description="Connection pool size")
    max_overflow: int = Field(default=20, ge=0, description="Maximum overflow connections")
    
    @field_validator("url")
    @classmethod
    def validate_database_url(cls, v: str) -> str:
        """
        Validates that the provided database URL uses a supported scheme.
        
        Args:
            v (str): The database URL string to validate.
        
        Returns:
            str: The validated database URL if it uses a supported scheme.
        
        Raises:
            ValueError: If the URL does not start with 'postgresql://', 'postgres://', or 'sqlite:///'.
        
        Example:
            >>> DatabaseConfig.validate_database_url("postgresql://user:pass@localhost/db")
            'postgresql://user:pass@localhost/db'
        
        Generated by CodeRabbit
        """
        if not v.startswith(("postgresql://", "postgres://", "sqlite:///")):
            raise ValueError("Invalid database URL format")
        return v


class RedisConfig(BaseModel):
    """
    Redis configuration settings.
    
    Manages Redis connection and caching parameters.
    """
    
    url: str = Field(
        default="redis://localhost:6379/0",
        description="Redis connection URL"
    )
    ttl: int = Field(
        default=3600,
        ge=1,
        description="Default TTL for cache entries in seconds"
    )


class SecurityConfig(BaseModel):
    """
    Security-related configuration.
    
    Manages JWT tokens, CORS settings, and application secrets.
    """
    
    secret_key: SecretStr = Field(..., description="Application secret key")
    jwt_algorithm: str = Field(default="HS256", description="JWT signing algorithm")
    jwt_expiration_minutes: int = Field(
        default=30,
        ge=1,
        description="JWT token expiration time in minutes"
    )
    allowed_origins: List[str] = Field(
        default_factory=lambda: ["http://localhost:3000"],
        description="Allowed CORS origins"
    )


class Settings(BaseSettings):
    """
    Application settings with environment variable support.
    
    This class manages all configuration for the Mobius platform,
    loading from environment variables with proper validation.
    
    Environment variables should be prefixed with MOBIUS_ and use
    double underscore (__) for nested configuration.
    
    Example:
        MOBIUS_DATABASE__URL=postgresql://user:pass@localhost/db
        MOBIUS_SECURITY__SECRET_KEY=your-secret-key
    """
    
    model_config = SettingsConfigDict(
        env_prefix="MOBIUS_",
        env_nested_delimiter="__",
        case_sensitive=False,
        env_file=".env",
        extra="ignore",
        frozen=True  # Make settings immutable
    )
    
    # Track deprecated settings
    _deprecated_settings: Dict[str, Dict[str, Any]] = {
        # Example format:
        # "old_setting_name": {
        #     "replacement": "new_setting_name",
        #     "version": "2.0.0",
        #     "message": "Custom deprecation message"
        # }
    }
    
    # Application settings
    app_name: str = Field(
        default="Mobius Context Platform",
        description="Application name"
    )
    environment: str = Field(
        default="development",
        description="Deployment environment"
    )
    debug: bool = Field(
        default=False,
        description="Debug mode flag"
    )
    host: str = Field(
        default="0.0.0.0",
        description="Server host address"
    )
    port: int = Field(
        default=8000,
        ge=1,
        le=65535,
        description="Server port"
    )
    
    # Component configurations
    database: DatabaseConfig = Field(
        ...,
        description="Database configuration"
    )
    redis: RedisConfig = Field(
        default_factory=RedisConfig,
        description="Redis configuration"
    )
    security: SecurityConfig = Field(
        ...,
        description="Security configuration"
    )
    
    # Feature flags
    enable_analytics: bool = Field(
        default=True,
        description="Enable analytics collection"
    )
    enable_cache: bool = Field(
        default=True,
        description="Enable caching layer"
    )
    
    @field_validator("environment")
    @classmethod
    def validate_environment(cls, v: str) -> str:
        """
        Validates that the provided environment name is one of the allowed values.
        
        Args:
            v (str): The environment name to validate.
        
        Returns:
            str: The validated environment name if it is allowed.
        
        Raises:
            ValueError: If the environment name is not one of 'development', 'staging', 'production', or 'test'.
        
        Example:
            validate_environment("production")  # Returns "production"
            validate_environment("invalid")     # Raises ValueError
        
        Generated by CodeRabbit
        """
        allowed = ["development", "staging", "production", "test"]
        if v not in allowed:
            raise ValueError(f"Environment must be one of: {allowed}")
        return v
    
    @field_validator("port")
    @classmethod
    def validate_port(cls, v: int) -> int:
        """
        Validates that the provided port number is within the allowed range (1 to 65535).
        
        Args:
            v (int): The port number to validate.
        
        Returns:
            int: The validated port number if it is within the valid range.
        
        Raises:
            ValueError: If the port number is not between 1 and 65535 (inclusive).
        
        Example:
            valid_port = Settings.validate_port(8080)  # Returns 8080
            invalid_port = Settings.validate_port(70000)  # Raises ValueError
        
        Generated by CodeRabbit
        """
        if not 1 <= v <= 65535:
            raise ValueError("Port must be between 1 and 65535")
        return v
    
    def __repr__(self) -> str:
        """
        Returns a safe string representation of the Settings instance, omitting sensitive information such as secrets.
        
        Returns:
            str: A string indicating the current environment of the Settings object.
        
        Generated by CodeRabbit
        """
        return f"<Settings environment={self.environment}>"
    
    def is_production(self) -> bool:
        """
        Determines whether the current environment is set to production.
        
        Returns:
            bool: True if the environment is "production", otherwise False.
        
        Generated by CodeRabbit
        """
        return self.environment == "production"
    
    def is_development(self) -> bool:
        """
        Determines whether the current environment is set to development.
        
        Returns:
            bool: True if the environment is "development", otherwise False.
        
        Generated by CodeRabbit
        """
        return self.environment == "development"
    
    def is_test(self) -> bool:
        """
        Determines whether the current environment is set to 'test'.
        
        Returns:
            bool: True if the environment is 'test', otherwise False.
        
        Generated by CodeRabbit
        """
        return self.environment == "test"
    
    @model_validator(mode='after')
    def check_deprecated_settings(self) -> 'Settings':
        """
        Validates configuration and issues warnings for deprecated settings.
        
        This method checks for deprecated configuration patterns and provides
        guidance on migrating to newer alternatives.
        
        Returns:
            Settings: The validated settings instance.
        """
        # Check for common deprecated patterns
        deprecated_warnings = []
        
        # Example: Check if using old database URL format
        if hasattr(self.database, 'url') and 'postgres://' in self.database.url:
            deprecated_warnings.append(
                "Database URL uses deprecated 'postgres://' scheme. "
                "Please update to 'postgresql://' for compatibility with newer SQLAlchemy versions."
            )
        
        # Check for insecure defaults in production
        if self.is_production():
            if self.debug:
                warnings.warn(
                    "Debug mode is enabled in production environment. "
                    "This may expose sensitive information.",
                    category=UserWarning,
                    stacklevel=2
                )
            
            if 'localhost' in self.security.allowed_origins[0]:
                warnings.warn(
                    "Production environment includes 'localhost' in allowed CORS origins. "
                    "Consider restricting to production domains only.",
                    category=UserWarning,
                    stacklevel=2
                )
        
        # Issue collected deprecation warnings
        for warning_msg in deprecated_warnings:
            warnings.warn(
                f"Configuration Deprecation: {warning_msg}",
                category=DeprecationWarning,
                stacklevel=2
            )
        
        return self
    
    def validate_configuration(self) -> List[str]:
        """
        Performs comprehensive configuration validation and returns any warnings.
        
        Returns:
            List[str]: A list of validation warnings (empty if all valid).
        """
        warnings_list = []
        
        # Check for missing recommended settings
        if self.is_production():
            if self.security.jwt_expiration_minutes > 60:
                warnings_list.append(
                    f"JWT expiration time ({self.security.jwt_expiration_minutes} minutes) "
                    "is longer than recommended for production (60 minutes max)"
                )
            
            if not self.enable_analytics:
                warnings_list.append(
                    "Analytics is disabled in production. "
                    "Consider enabling for monitoring and insights."
                )
        
        # Check Redis configuration
        if self.enable_cache and self.redis.ttl > 86400:  # 24 hours
            warnings_list.append(
                f"Redis TTL ({self.redis.ttl} seconds) is very long. "
                "Consider shorter TTL to prevent stale cache data."
            )
        
        # Check database pool settings
        if self.database.pool_size < 5 and self.is_production():
            warnings_list.append(
                f"Database pool size ({self.database.pool_size}) may be too small "
                "for production workloads. Consider increasing to at least 10."
            )
        
        return warnings_list


# Singleton pattern for settings
_settings: Settings | None = None


def get_settings() -> Settings:
    """
    Returns the singleton instance of the application Settings, creating and caching it if necessary.
    
    This function implements a singleton pattern to ensure that the application's configuration is loaded and parsed only once, improving performance and consistency across the codebase.
    
    Returns:
        Settings: The cached Settings instance containing all application configuration.
    
    Example:
        >>> from app.core.config import get_settings
        >>> settings = get_settings()
        >>> print(settings.app_name)
    
    Generated by CodeRabbit
    """
    global _settings
    if _settings is None:
        _settings = Settings()
        
        # Run configuration validation on first load
        validation_warnings = _settings.validate_configuration()
        if validation_warnings:
            for warning_msg in validation_warnings:
                warnings.warn(
                    f"Configuration Warning: {warning_msg}",
                    category=UserWarning,
                    stacklevel=2
                )
    
    return _settings


def reset_settings() -> None:
    """
    Resets the cached singleton instance of application settings.
    
    This function clears the internal cache of the `Settings` object, forcing a reload of configuration on the next call to `get_settings()`. It is primarily intended for use in testing scenarios where environment variables may change and a fresh configuration load is required.
    
    Generated by CodeRabbit
    """
    global _settings
    _settings = None