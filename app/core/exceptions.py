"""
Custom exception hierarchy for Mobius Context Platform.

This module defines a comprehensive exception hierarchy for consistent error
handling across the platform. All exceptions inherit from a base MobiusException
class and include proper error codes, messages, and HTTP status mappings.
"""

from typing import Any, Dict, Optional
from enum import Enum
from http import HTTPStatus


class ErrorCode(str, Enum):
    """
    Standardized error codes for the platform.

    These codes provide a consistent way to identify error types
    across the system, independent of HTTP status codes.
    """

    # General errors (1000-1999)
    INTERNAL_ERROR = "INTERNAL_ERROR"
    VALIDATION_ERROR = "VALIDATION_ERROR"
    NOT_FOUND = "NOT_FOUND"
    METHOD_NOT_ALLOWED = "METHOD_NOT_ALLOWED"
    CONFLICT = "CONFLICT"

    # Authentication errors (2000-2999)
    UNAUTHORIZED = "UNAUTHORIZED"
    INVALID_CREDENTIALS = "INVALID_CREDENTIALS"
    TOKEN_EXPIRED = "TOKEN_EXPIRED"
    TOKEN_INVALID = "TOKEN_INVALID"

    # Authorization errors (3000-3999)
    FORBIDDEN = "FORBIDDEN"
    INSUFFICIENT_PERMISSIONS = "INSUFFICIENT_PERMISSIONS"

    # Rate limiting errors (4000-4999)
    RATE_LIMIT_EXCEEDED = "RATE_LIMIT_EXCEEDED"
    QUOTA_EXCEEDED = "QUOTA_EXCEEDED"

    # Business logic errors (5000-5999)
    INVALID_OPERATION = "INVALID_OPERATION"
    RESOURCE_LOCKED = "RESOURCE_LOCKED"
    DEPENDENCY_ERROR = "DEPENDENCY_ERROR"

    # External service errors (6000-6999)
    EXTERNAL_SERVICE_ERROR = "EXTERNAL_SERVICE_ERROR"
    VECTOR_DB_ERROR = "VECTOR_DB_ERROR"
    STORAGE_ERROR = "STORAGE_ERROR"

    # Context-specific errors (7000-7999)
    CONTEXT_NOT_FOUND = "CONTEXT_NOT_FOUND"
    CONTEXT_INVALID = "CONTEXT_INVALID"
    CONTEXT_TOO_LARGE = "CONTEXT_TOO_LARGE"
    EMBEDDING_ERROR = "EMBEDDING_ERROR"


class MobiusException(Exception):
    """
    Base exception class for all Mobius platform exceptions.

    This provides a consistent interface for all custom exceptions
    with proper error codes, messages, and additional context.
    """

    def __init__(
        self,
        message: str,
        error_code: ErrorCode = ErrorCode.INTERNAL_ERROR,
        status_code: int = HTTPStatus.INTERNAL_SERVER_ERROR,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes a MobiusException with a message, error code, HTTP status code, and optional additional details.

        Args:
            message (str): Human-readable description of the error.
            error_code (ErrorCode, optional): Standardized error code representing the error type. Defaults to ErrorCode.INTERNAL_ERROR.
            status_code (int, optional): HTTP status code associated with the error. Defaults to HTTPStatus.INTERNAL_SERVER_ERROR.
            details (dict, optional): Additional context or metadata about the error.

        Generated by CodeRabbit
        """
        super().__init__(message)
        self.message = message
        self.error_code = error_code
        self.status_code = status_code
        self.details = details or {}

    def to_dict(self) -> Dict[str, Any]:
        """
        Converts the exception instance into a dictionary suitable for API responses.

        Returns:
            Dict[str, Any]: A dictionary containing the error code, message, and additional details.

        Generated by CodeRabbit
        """
        return {
            "error": {
                "code": self.error_code.value,
                "message": self.message,
                "details": self.details,
            }
        }


# General Exceptions


class ValidationError(MobiusException):
    """Raised when input validation fails."""

    def __init__(self, message: str, details: Optional[Dict[str, Any]] = None) -> None:
        """
        Initializes a ValidationError for input validation failures.

        Args:
            message (str): Description of the validation error.
            details (Optional[Dict[str, Any]]): Additional context or metadata about the validation failure.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=ErrorCode.VALIDATION_ERROR,
            status_code=HTTPStatus.BAD_REQUEST,
            details=details,
        )


class NotFoundError(MobiusException):
    """Raised when a requested resource is not found."""

    def __init__(self, resource: str, resource_id: Optional[str] = None) -> None:
        """
        Initializes a NotFoundError for a missing resource, optionally specifying the resource ID.

        Args:
            resource (str): The name of the resource that was not found.
            resource_id (Optional[str]): The unique identifier of the resource, if applicable.

        Generated by CodeRabbit
        """
        message = f"{resource} not found"
        if resource_id:
            message = f"{resource} with id '{resource_id}' not found"

        super().__init__(
            message=message,
            error_code=ErrorCode.NOT_FOUND,
            status_code=HTTPStatus.NOT_FOUND,
            details={"resource": resource, "resource_id": resource_id},
        )


class ConflictError(MobiusException):
    """Raised when an operation conflicts with existing state."""

    def __init__(self, message: str, details: Optional[Dict[str, Any]] = None) -> None:
        """
        Initializes a ConflictError to indicate an operation conflict with the current resource state.

        Args:
            message (str): Description of the conflict.
            details (Optional[Dict[str, Any]]): Optional additional context about the conflict.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=ErrorCode.CONFLICT,
            status_code=HTTPStatus.CONFLICT,
            details=details,
        )


# Authentication Exceptions


class AuthenticationError(MobiusException):
    """Base class for authentication-related errors."""

    def __init__(
        self,
        message: str = "Authentication required",
        error_code: ErrorCode = ErrorCode.UNAUTHORIZED,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes an AuthenticationError indicating that authentication is required.

        Args:
            message (str, optional): Custom error message. Defaults to "Authentication required".
            error_code (ErrorCode, optional): Specific error code for the authentication error. Defaults to ErrorCode.UNAUTHORIZED.
            details (dict, optional): Additional context or metadata about the error.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=error_code,
            status_code=HTTPStatus.UNAUTHORIZED,
            details=details,
        )


class InvalidCredentialsError(AuthenticationError):
    """Raised when provided credentials are invalid."""

    def __init__(self, message: str = "Invalid credentials") -> None:
        """
        Initializes an InvalidCredentialsError to indicate authentication failure due to invalid credentials.

        Args:
            message (str, optional): Custom error message. Defaults to "Invalid credentials".

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=ErrorCode.INVALID_CREDENTIALS,
        )


class TokenExpiredError(AuthenticationError):
    """Raised when an authentication token has expired."""

    def __init__(self, message: str = "Token has expired") -> None:
        """
        Initializes a TokenExpiredError to indicate that an authentication token has expired.

        Args:
            message (str, optional): Custom error message. Defaults to "Token has expired".

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=ErrorCode.TOKEN_EXPIRED,
        )


class TokenInvalidError(AuthenticationError):
    """Raised when an authentication token is invalid."""

    def __init__(self, message: str = "Invalid token") -> None:
        """
        Initializes a TokenInvalidError to indicate that an authentication token is invalid.

        Args:
            message (str, optional): Custom error message. Defaults to "Invalid token".

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=ErrorCode.TOKEN_INVALID,
        )


# Authorization Exceptions


class AuthorizationError(MobiusException):
    """Base class for authorization-related errors."""

    def __init__(
        self,
        message: str = "Access forbidden",
        error_code: ErrorCode = ErrorCode.FORBIDDEN,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes an AuthorizationError indicating that access to a resource is forbidden.

        Args:
            message (str, optional): Custom error message. Defaults to "Access forbidden".
            error_code (ErrorCode, optional): Specific error code for the authorization error. Defaults to ErrorCode.FORBIDDEN.
            details (dict, optional): Additional context or metadata about the error.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=error_code,
            status_code=HTTPStatus.FORBIDDEN,
            details=details,
        )


class InsufficientPermissionsError(AuthorizationError):
    """Raised when user lacks required permissions."""

    def __init__(
        self, required_permission: str, resource: Optional[str] = None
    ) -> None:
        """
        Initialize an InsufficientPermissionsError indicating a user lacks the required permission for a resource.

        Args:
            required_permission (str): The permission required to perform the operation.
            resource (Optional[str]): The resource for which the permission is required, if applicable.

        Generated by CodeRabbit
        """
        message = f"Insufficient permissions: {required_permission} required"
        if resource:
            message = f"{message} for {resource}"

        super().__init__(
            message=message,
            error_code=ErrorCode.INSUFFICIENT_PERMISSIONS,
            details={"required_permission": required_permission, "resource": resource},
        )


# Rate Limiting Exceptions


class RateLimitError(MobiusException):
    """Base class for rate limiting errors."""

    def __init__(
        self,
        message: str,
        error_code: ErrorCode = ErrorCode.RATE_LIMIT_EXCEEDED,
        retry_after: Optional[int] = None,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes a rate limiting exception with a message, error code, optional retry-after value, and additional details.

        Args:
            message (str): Description of the rate limiting error.
            error_code (ErrorCode, optional): Specific error code for the rate limiting error. Defaults to ErrorCode.RATE_LIMIT_EXCEEDED.
            retry_after (Optional[int], optional): Number of seconds the client should wait before retrying. If provided, included in the error details.
            details (Optional[Dict[str, Any]], optional): Additional context or metadata for the error.

        Generated by CodeRabbit
        """
        details = details or {}
        if retry_after:
            details["retry_after"] = retry_after

        super().__init__(
            message=message,
            error_code=error_code,
            status_code=HTTPStatus.TOO_MANY_REQUESTS,
            details=details,
        )


class RateLimitExceededError(RateLimitError):
    """Raised when API rate limit is exceeded."""

    def __init__(
        self, limit: int, window: str, retry_after: Optional[int] = None
    ) -> None:
        """
        Initialize a RateLimitExceededError indicating that the API rate limit has been exceeded.

        Args:
            limit (int): The maximum number of allowed requests within the specified window.
            window (str): The time window for the rate limit (e.g., 'minute', 'hour').
            retry_after (Optional[int]): Optional number of seconds after which the client can retry.

        Generated by CodeRabbit
        """
        super().__init__(
            message=f"Rate limit exceeded: {limit} requests per {window}",
            error_code=ErrorCode.RATE_LIMIT_EXCEEDED,
            retry_after=retry_after,
            details={"limit": limit, "window": window},
        )


class QuotaExceededError(RateLimitError):
    """Raised when user quota is exceeded."""

    def __init__(self, quota_type: str, limit: int, current: int) -> None:
        """
        Initialize a QuotaExceededError indicating that a specific quota has been surpassed.

        Args:
            quota_type (str): The type of quota that was exceeded (e.g., "API calls", "storage").
            limit (int): The maximum allowed value for the quota.
            current (int): The current value that exceeded the quota.

        Generated by CodeRabbit
        """
        super().__init__(
            message=f"{quota_type} quota exceeded: {current}/{limit}",
            error_code=ErrorCode.QUOTA_EXCEEDED,
            details={"quota_type": quota_type, "limit": limit, "current": current},
        )


# Business Logic Exceptions


class BusinessLogicError(MobiusException):
    """Base class for business logic errors."""

    def __init__(
        self,
        message: str,
        error_code: ErrorCode = ErrorCode.INVALID_OPERATION,
        status_code: int = HTTPStatus.BAD_REQUEST,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes a BusinessLogicError for representing business logic violations.

        Args:
            message (str): Description of the business logic error.
            error_code (ErrorCode, optional): Specific error code for the violation. Defaults to ErrorCode.INVALID_OPERATION.
            status_code (int, optional): HTTP status code to associate with the error. Defaults to HTTPStatus.BAD_REQUEST.
            details (dict, optional): Additional context or metadata about the error.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=error_code,
            status_code=status_code,
            details=details,
        )


class ResourceLockedError(BusinessLogicError):
    """Raised when a resource is locked and cannot be modified."""

    def __init__(
        self, resource: str, resource_id: str, locked_by: Optional[str] = None
    ) -> None:
        """
        Initializes a ResourceLockedError indicating that a specific resource is locked and cannot be modified.

        Args:
            resource (str): The name of the locked resource.
            resource_id (str): The unique identifier of the locked resource.
            locked_by (Optional[str]): The user or process that locked the resource, if available.

        Generated by CodeRabbit
        """
        details = {"resource": resource, "resource_id": resource_id}
        if locked_by:
            details["locked_by"] = locked_by

        super().__init__(
            message=f"{resource} '{resource_id}' is locked and cannot be modified",
            error_code=ErrorCode.RESOURCE_LOCKED,
            status_code=HTTPStatus.CONFLICT,
            details=details,
        )


# External Service Exceptions


class ExternalServiceError(MobiusException):
    """Base class for external service errors."""

    def __init__(
        self,
        service: str,
        message: str,
        error_code: ErrorCode = ErrorCode.EXTERNAL_SERVICE_ERROR,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes an ExternalServiceError for failures related to an external service.

        Args:
            service (str): The name of the external service where the error occurred.
            message (str): A descriptive error message.
            error_code (ErrorCode, optional): The error code representing the type of external service error. Defaults to ErrorCode.EXTERNAL_SERVICE_ERROR.
            details (dict, optional): Additional context or metadata about the error.

        Returns:
            None

        Raises:
            None

        Generated by CodeRabbit
        """
        details = details or {}
        details["service"] = service

        super().__init__(
            message=f"{service} error: {message}",
            error_code=error_code,
            status_code=HTTPStatus.SERVICE_UNAVAILABLE,
            details=details,
        )


class VectorDatabaseError(ExternalServiceError):
    """Raised when vector database operations fail."""

    def __init__(
        self, operation: str, message: str, details: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        Initialize a VectorDatabaseError for failures related to vector database operations.

        Args:
            operation (str): The name of the vector database operation that failed.
            message (str): A descriptive error message.
            details (Optional[Dict[str, Any]]): Optional additional context for the error.

        Generated by CodeRabbit
        """
        details = details or {}
        details["operation"] = operation

        super().__init__(
            service="Vector Database",
            message=message,
            error_code=ErrorCode.VECTOR_DB_ERROR,
            details=details,
        )


class StorageError(ExternalServiceError):
    """Raised when storage operations fail."""

    def __init__(
        self, operation: str, message: str, details: Optional[Dict[str, Any]] = None
    ) -> None:
        """
        Initializes a StorageError for failures related to storage operations.

        Args:
            operation (str): The name of the storage operation that failed.
            message (str): A descriptive error message.
            details (Optional[Dict[str, Any]]): Additional context or metadata about the error.

        Returns:
            None

        Raises:
            None

        Generated by CodeRabbit
        """
        details = details or {}
        details["operation"] = operation

        super().__init__(
            service="Storage",
            message=message,
            error_code=ErrorCode.STORAGE_ERROR,
            details=details,
        )


# Context-specific Exceptions


class ContextError(MobiusException):
    """Base class for context-related errors."""

    def __init__(
        self,
        message: str,
        error_code: ErrorCode = ErrorCode.CONTEXT_INVALID,
        status_code: int = HTTPStatus.BAD_REQUEST,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes a ContextError, representing an error related to invalid or problematic context within the platform.

        Args:
            message (str): Description of the context error.
            error_code (ErrorCode, optional): Specific error code for the context error. Defaults to ErrorCode.CONTEXT_INVALID.
            status_code (int, optional): HTTP status code associated with the error. Defaults to HTTPStatus.BAD_REQUEST.
            details (Optional[Dict[str, Any]], optional): Additional contextual information about the error.

        Generated by CodeRabbit
        """
        super().__init__(
            message=message,
            error_code=error_code,
            status_code=status_code,
            details=details,
        )


class ContextNotFoundError(ContextError):
    """Raised when a context is not found."""

    def __init__(self, context_id: str) -> None:
        """
        Initializes a ContextNotFoundError for a missing context resource.

        Args:
            context_id (str): The unique identifier of the context that was not found.

        Generated by CodeRabbit
        """
        super().__init__(
            message=f"Context '{context_id}' not found",
            error_code=ErrorCode.CONTEXT_NOT_FOUND,
            status_code=HTTPStatus.NOT_FOUND,
            details={"context_id": context_id},
        )


class ContextTooLargeError(ContextError):
    """Raised when context exceeds size limits."""

    def __init__(self, size: int, max_size: int) -> None:
        """
        Initialize a ContextTooLargeError indicating that the context size exceeds the allowed maximum.

        Args:
            size (int): The actual size of the context.
            max_size (int): The maximum allowed size for the context.

        Generated by CodeRabbit
        """
        super().__init__(
            message=f"Context size {size} exceeds maximum allowed size {max_size}",
            error_code=ErrorCode.CONTEXT_TOO_LARGE,
            status_code=HTTPStatus.REQUEST_ENTITY_TOO_LARGE,
            details={"size": size, "max_size": max_size},
        )


class EmbeddingError(ContextError):
    """Raised when embedding generation fails."""

    def __init__(
        self,
        message: str,
        model: Optional[str] = None,
        details: Optional[Dict[str, Any]] = None,
    ) -> None:
        """
        Initializes an EmbeddingError to represent a failure during embedding generation.

        Args:
            message (str): Description of the embedding error.
            model (Optional[str]): Name of the embedding model involved, if applicable.
            details (Optional[Dict[str, Any]]): Additional context or metadata about the error.

        Generated by CodeRabbit
        """
        details = details or {}
        if model:
            details["model"] = model

        super().__init__(
            message=f"Embedding error: {message}",
            error_code=ErrorCode.EMBEDDING_ERROR,
            status_code=HTTPStatus.INTERNAL_SERVER_ERROR,
            details=details,
        )
