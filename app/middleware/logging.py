"""
FastAPI middleware for request/response logging.

This middleware provides:
- Request and response logging with timing
- Structured logging with context
- Error handling and logging

Note: This middleware depends on CorrelationIdMiddleware to be executed first
to set request.state.correlation_id. It does not handle correlation ID
generation or extraction - that is the responsibility of CorrelationIdMiddleware.
"""

import time
import uuid
from typing import Callable, Optional

import structlog
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp

from app.core.logging import LogConfig, get_logger


class LoggingMiddleware(BaseHTTPMiddleware):
    """Middleware for request/response logging.
    
    This middleware depends on CorrelationIdMiddleware running before it
    to set request.state.correlation_id.
    """
    
    def __init__(self, app: ASGIApp, log_config: Optional[LogConfig] = None):
        """
        Initializes the LoggingMiddleware with the given ASGI application and optional logging configuration.
        
        Args:
            app (ASGIApp): The ASGI application instance to wrap with middleware.
            log_config (Optional[LogConfig]): Optional logging configuration. If not provided, a default LogConfig is used.
        
        Returns:
            None
        
        Example:
            middleware = LoggingMiddleware(app, log_config=my_log_config)
        
        Generated by CodeRabbit
        """
        super().__init__(app)
        self.log_config = log_config or LogConfig()
        self.logger = get_logger(__name__)
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """
        Intercepts and processes each HTTP request, logging structured request and response details with correlation and request IDs.
        
        Args:
            request (Request): The incoming FastAPI request object.
            call_next (Callable): The next middleware or route handler to call.
        
        Returns:
            Response: The HTTP response generated by the downstream handler, with the correlation ID injected into the response headers.
        
        Raises:
            Exception: Propagates any exception raised during request processing after logging error details.
        
        Example:
            # Usage within FastAPI application setup
            app.add_middleware(LoggingMiddleware)
        
        Notes:
            - Binds request ID, HTTP method, path, and client host to the structured logging context.
            - Logs request start, completion (with status and duration), and errors with stack trace.
            - Correlation ID is retrieved from request.state (set by CorrelationIdMiddleware).
            - Request ID is always generated for each individual request.
        
        Generated by CodeRabbit
        """
        # Generate request ID for this specific request
        request_id = self._generate_request_id()
        
        # Bind request-specific context to logger
        # Note: correlation_id is already bound by CorrelationIdMiddleware,
        # so we only need to bind request-specific fields
        structlog.contextvars.bind_contextvars(
            request_id=request_id,
            method=request.method,
            path=str(request.url.path),
            client_host=request.client.host if request.client else None,
        )
        
        # Log request
        start_time = time.time()
        self.logger.info(
            "request_started",
            headers=dict(request.headers),
            query_params=dict(request.query_params),
        )
        
        try:
            # Process request
            response = await call_next(request)
            
            # Calculate duration
            duration_ms = (time.time() - start_time) * 1000
            
            # Log response
            self.logger.info(
                "request_completed",
                status_code=response.status_code,
                duration_ms=round(duration_ms, 2),
            )
            
            # Note: correlation ID is already added to response headers by CorrelationIdMiddleware
            
            return response
            
        except Exception as e:
            # Calculate duration even for errors
            duration_ms = (time.time() - start_time) * 1000
            
            # Log error
            self.logger.error(
                "request_failed",
                status_code=500,
                duration_ms=round(duration_ms, 2),
                error=str(e),
                exc_info=True,
            )
            
            # Re-raise the exception to let FastAPI handle it
            raise
    
    def _generate_request_id(self) -> str:
        """
        Generates a unique request ID as an 8-character string.
        
        Returns:
            str: An 8-character string derived from a newly generated UUID, used to uniquely identify each request.
        
        Generated by CodeRabbit
        """
        return str(uuid.uuid4())[:8]