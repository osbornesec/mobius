import { useMutation as useReactMutation, UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { ApiError } from '@/services/api/config';
import useUIStore from '@/store/uiStore';

/****
 * @description
 * Custom React hook that wraps `@tanstack/react-query`'s `useMutation` to provide automatic success and error notifications. It centralizes mutation logic and notification handling, while allowing full customization of mutation behavior and notification messages.
 *
 * @param mutationFn - A function that performs the mutation and returns a Promise resolving to the mutation result.
 * @param options - Optional configuration extending `UseMutationOptions`, with additional fields:
 *   - `successMessage` (string): Message to display on successful mutation.
 *   - `errorMessage` (string): Message to display on mutation error (defaults to the error's message or a generic fallback).
 *   - `showNotification` (boolean): Whether to show notifications (default: true).
 *
 * @returns
 * Returns a `UseMutationResult` object from `@tanstack/react-query`, including mutation state and helper methods.
 *
 * @example
 * const mutation = useMutation(
 *   (data: MyData) => api.updateItem(data),
 *   {
 *     successMessage: "Item updated successfully!",
 *     errorMessage: "Failed to update item.",
 *     onSuccess: () => { /* custom logic */ },
 *   }
 * );
 * mutation.mutate({ id: 1, value: "new" });
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function useMutation<TData = unknown, TError = ApiError, TVariables = void>(
  mutationFn: (variables: TVariables) => Promise<TData>,
  options?: UseMutationOptions<TData, TError, TVariables> & {
    successMessage?: string;
    errorMessage?: string;
    showNotification?: boolean;
  }
): UseMutationResult<TData, TError, TVariables> {
  const { addNotification } = useUIStore();
  const { successMessage, errorMessage, showNotification = true, ...mutationOptions } = options || {};

  return useReactMutation({
    mutationFn,
    onSuccess: (data, variables, context) => {
      if (showNotification && successMessage) {
        addNotification({
          type: 'success',
          title: 'Success',
          message: successMessage,
        });
      }
      mutationOptions.onSuccess?.(data, variables, context);
    },
    onError: (error, variables, context) => {
      if (showNotification) {
        const message = errorMessage || (error as any)?.message || 'An error occurred';
        addNotification({
          type: 'error',
          title: 'Error',
          message,
        });
      }
      mutationOptions.onError?.(error, variables, context);
    },
    ...mutationOptions,
  });
}
