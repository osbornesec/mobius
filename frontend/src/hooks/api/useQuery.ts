import { useQuery as useReactQuery, UseQueryOptions, UseQueryResult } from '@tanstack/react-query';
import { AxiosError } from 'axios';
import { ApiError } from '@/services/api/config';

/**
 * @description
 * Custom React hook that wraps the `@tanstack/react-query` `useQuery` hook, providing enhanced error handling and strict typing for API requests.
 *
 * This hook prevents retries on client-side HTTP errors (status codes 400â€“499) and allows up to three retries for other errors. It is designed to work seamlessly with APIs that use Axios and a custom `ApiError` type.
 *
 * @param queryKey - An array that uniquely identifies the query.
 * @param queryFn - An asynchronous function that fetches and returns the query data as a promise.
 * @param options - Optional configuration for the query, excluding `queryKey` and `queryFn`.
 * @returns The result of the query, including status, data, and error information, typed with `TData` and `TError`.
 * @example
 * const { data, error, isLoading } = useQuery(
 *   ['user', userId],
 *   () => fetchUser(userId)
 * );
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function useQuery<TData = unknown, TError = ApiError>(
  queryKey: any[],
  queryFn: () => Promise<TData>,
  options?: Omit<UseQueryOptions<TData, TError>, 'queryKey' | 'queryFn'>
): UseQueryResult<TData, TError> {
  return useReactQuery({
    queryKey,
    queryFn,
    retry: (failureCount, error) => {
      // Don't retry on 4xx errors
      if (error instanceof AxiosError && error.response?.status && error.response.status >= 400 && error.response.status < 500) {
        return false;
      }
      // Retry up to 3 times for other errors
      return failureCount < 3;
    },
    ...options,
  });
}
