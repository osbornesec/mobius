import { useEffect } from 'react';
import useUIStore from '@/store/uiStore';

/**
 * @description
 * React hook that manages the application's theme based on user preference and system color scheme. It synchronizes the theme state with the system's dark mode setting when the theme is set to 'system', dynamically applying or removing the 'dark' CSS class on the document root element as needed.
 *
 * @returns An object containing the current theme and a function to update the theme.
 *
 * @example
 * const { theme, setTheme } = useTheme();
 * setTheme('dark'); // Switches to dark mode
 * setTheme('system'); // Follows system color scheme
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function useTheme() {
  const { theme, setTheme } = useUIStore();

  useEffect(() => {
    try {
      const root = document.documentElement;
      let mediaQuery: MediaQueryList | null = null;

      // Safely create media query with error handling
      try {
        mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      } catch (error) {
        console.warn('Failed to detect system color scheme preference:', error);
        // Fall back to light theme if media query fails
        mediaQuery = null;
      }

      const applyTheme = () => {
        try {
          const shouldBeDark =
            theme === 'dark' || (theme === 'system' && mediaQuery?.matches === true);

          if (shouldBeDark) {
            root.classList.add('dark');
          } else {
            root.classList.remove('dark');
          }
        } catch (error) {
          console.error('Failed to apply theme:', error);
          // Ensure we at least remove dark class on error
          root.classList.remove('dark');
        }
      };

      // Apply theme immediately
      applyTheme();

      // Only add the event listener when theme is 'system' and mediaQuery is available
      if (theme === 'system' && mediaQuery) {
        try {
          if (mediaQuery.addEventListener) {
            mediaQuery.addEventListener('change', applyTheme);
          } else {
            // Safari < 14 fallback
            (mediaQuery as any).addListener(applyTheme);
          }
        } catch (error) {
          console.warn('Failed to add theme change listener:', error);
        }
      }

      return () => {
        // Only remove the event listener when theme is 'system' and mediaQuery exists
        if (theme === 'system' && mediaQuery) {
          try {
            if (mediaQuery.removeEventListener) {
              mediaQuery.removeEventListener('change', applyTheme);
            } else {
              // Safari < 14 fallback
              (mediaQuery as any).removeListener(applyTheme);
            }
          } catch (error) {
            console.warn('Failed to remove theme change listener:', error);
          }
        }
      };
    } catch (error) {
      console.error('Critical error in theme hook:', error);
      // Return no-op cleanup function on critical error
      return () => {};
    }
  }, [theme]);

  return { theme, setTheme };
}
