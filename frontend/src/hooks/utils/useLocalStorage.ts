import { useState, useEffect, useCallback } from 'react';
import { localStorage as storageUtil, StorageError, StorageErrorType } from '@/utils/storage';

/**
 * @description
 * React hook that synchronizes a stateful value with `localStorage`, providing a getter, setter, and remover. Keeps state in sync across browser tabs/windows and handles serialization, deserialization, and error cases gracefully.
 *
 * @param key - The `localStorage` key under which the value is stored.
 * @param defaultValue - The default value to use if the key does not exist or parsing fails.
 * @returns A tuple: `[storedValue, setValue, removeValue]` where:
 *   - `storedValue` is the current value from state/localStorage,
 *   - `setValue` updates both state and `localStorage` (accepts a value or updater function),
 *   - `removeValue` deletes the key from `localStorage` and resets state to `defaultValue`.
 *
 * @throws This hook does not throw, but logs errors to the console if `localStorage` access or JSON parsing fails.
 *
 * @example
 * ```tsx
 * const [user, setUser, removeUser] = useLocalStorage<User>('user', { name: '', age: 0 });
 *
 * // Set a new user
 * setUser({ name: 'Alice', age: 30 });
 *
 * // Update user with a function
 * setUser(prev => ({ ...prev, age: prev.age + 1 }));
 *
 * // Remove user from localStorage
 * removeUser();
 * ```
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function useLocalStorage<T>(
  key: string,
  defaultValue: T
): [T, (value: T | ((val: T) => T)) => void, () => void] {
  // Get value from localStorage or use default with detailed error handling
  const getStoredValue = useCallback((): T => {
    try {
      const value = storageUtil.get<T>(key, defaultValue);
      return value !== null ? value : defaultValue;
    } catch (error) {
      if (error instanceof StorageError) {
        switch (error.type) {
          case StorageErrorType.STORAGE_DISABLED:
            console.warn(
              `[useLocalStorage] Storage is disabled for key "${key}", using default value`
            );
            break;
          case StorageErrorType.PARSE_ERROR:
            console.error(
              `[useLocalStorage] Parse error for key "${key}", using default value:`,
              error
            );
            // Attempt to clear corrupted data
            try {
              storageUtil.remove(key);
              console.info(`[useLocalStorage] Cleared corrupted data for key "${key}"`);
            } catch (clearErr) {
              console.error(`[useLocalStorage] Failed to clear corrupted data:`, clearErr);
            }
            break;
          default:
            console.error(`[useLocalStorage] Unexpected error reading key "${key}":`, error);
        }
      } else {
        console.error(`[useLocalStorage] Unknown error reading key "${key}":`, error);
      }
      return defaultValue;
    }
  }, [key, defaultValue]);

  const [storedValue, setStoredValue] = useState<T>(getStoredValue);

  // Return a wrapped version of useState's setter function that persists to localStorage
  const setValue = useCallback(
    (value: T | ((val: T) => T)) => {
      try {
        // Allow value to be a function so we have same API as useState
        const valueToStore = value instanceof Function ? value(storedValue) : value;

        // Save state
        setStoredValue(valueToStore);

        // Save to local storage with error handling
        try {
          storageUtil.set(key, valueToStore);
          console.debug(`[useLocalStorage] Successfully set key "${key}"`);

          // Dispatch storage event for other tabs/windows
          window.dispatchEvent(
            new StorageEvent('storage', {
              key,
              newValue: JSON.stringify(valueToStore),
              url: window.location.href,
            })
          );
        } catch (storageErr) {
          if (storageErr instanceof StorageError) {
            switch (storageErr.type) {
              case StorageErrorType.QUOTA_EXCEEDED:
                console.error(`[useLocalStorage] Storage quota exceeded for key "${key}"`, {
                  valueSize: JSON.stringify(valueToStore).length,
                  storageInfo: storageUtil.getStorageInfo(),
                });
                // Notify user through UI if possible
                setStoredValue(storedValue); // Revert to previous value
                throw new Error(`Storage quota exceeded. Unable to save data for "${key}".`);

              case StorageErrorType.STORAGE_DISABLED:
                console.warn(`[useLocalStorage] Storage is disabled, cannot persist key "${key}"`);
                break;

              case StorageErrorType.SERIALIZE_ERROR:
                console.error(
                  `[useLocalStorage] Failed to serialize value for key "${key}":`,
                  storageErr
                );
                setStoredValue(storedValue); // Revert to previous value
                break;

              default:
                console.error(
                  `[useLocalStorage] Unexpected storage error for key "${key}":`,
                  storageErr
                );
            }
          } else {
            console.error(`[useLocalStorage] Unknown error setting key "${key}":`, storageErr);
          }
        }
      } catch (error) {
        // Re-throw quota exceeded errors to notify the caller
        if (error instanceof Error && error.message.includes('quota exceeded')) {
          throw error;
        }
        console.error(`[useLocalStorage] Error in setValue for key "${key}":`, error);
      }
    },
    [key, storedValue]
  );

  // Remove value from localStorage
  const removeValue = useCallback(() => {
    try {
      storageUtil.remove(key);
      setStoredValue(defaultValue);
      console.debug(`[useLocalStorage] Successfully removed key "${key}"`);

      // Dispatch storage event for other tabs/windows
      window.dispatchEvent(
        new StorageEvent('storage', {
          key,
          newValue: null,
          url: window.location.href,
        })
      );
    } catch (error) {
      if (error instanceof StorageError) {
        console.error(`[useLocalStorage] Storage error removing key "${key}":`, {
          errorType: error.type,
          message: error.message,
        });
      } else {
        console.error(`[useLocalStorage] Unknown error removing key "${key}":`, error);
      }
    }
  }, [key, defaultValue]);

  // Listen for changes in other tabs/windows
  useEffect(() => {
    const handleStorageChange = (e: StorageEvent) => {
      if (e.key === key && e.newValue !== null) {
        try {
          const parsedValue = JSON.parse(e.newValue);
          setStoredValue(parsedValue);
          console.debug(`[useLocalStorage] Synced key "${key}" from another tab`);
        } catch (error) {
          console.error(
            `[useLocalStorage] Error parsing storage event value for key "${key}":`,
            error
          );
          // Try to get the value directly from storage
          try {
            const value = storageUtil.get<T>(key, defaultValue);
            if (value !== null) {
              setStoredValue(value);
            }
          } catch (getError) {
            console.error(`[useLocalStorage] Failed to recover value for key "${key}":`, getError);
          }
        }
      } else if (e.key === key && e.newValue === null) {
        setStoredValue(defaultValue);
        console.debug(`[useLocalStorage] Key "${key}" was removed in another tab`);
      }
    };

    window.addEventListener('storage', handleStorageChange);
    return () => window.removeEventListener('storage', handleStorageChange);
  }, [key, defaultValue]);

  return [storedValue, setValue, removeValue];
}
