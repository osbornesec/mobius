import { useEffect, useCallback } from 'react';
import { wsClient } from '@/services/websocket/client';
import type { EventHandler } from '@/services/websocket/client';

interface UseWebSocketOptions {
  autoConnect?: boolean;
  onConnect?: () => void;
  onDisconnect?: () => void;
  onError?: (error: any) => void;
}

/**
 * @description
 * React hook that manages a WebSocket client connection, providing event subscription, emission, and connection control with automatic cleanup of event listeners.
 *
 * @param options - Optional configuration object:
 *   - autoConnect?: boolean — Whether to automatically connect on mount (default: true)
 *   - onConnect?: () => void — Callback invoked when the WebSocket connects
 *   - onDisconnect?: () => void — Callback invoked when the WebSocket disconnects
 *   - onError?: (error: Error) => void — Callback invoked on WebSocket error
 *
 * @returns An object with methods:
 *   - emit(event: string, data?: any): void — Emits an event with optional data through the WebSocket
 *   - on(event: string, handler: EventHandler): () => void — Registers an event handler and returns an unsubscribe function
 *   - off(event: string, handler: EventHandler): void — Unregisters an event handler
 *   - isConnected(): boolean — Returns the current connection status
 *   - connect(): void — Manually initiates the WebSocket connection
 *   - disconnect(): void — Manually disconnects the WebSocket
 *
 * @example
 * const {
 *   emit,
 *   on,
 *   off,
 *   isConnected,
 *   connect,
 *   disconnect
 * } = useWebSocket({
 *   autoConnect: true,
 *   onConnect: () => console.log('Connected!'),
 *   onDisconnect: () => console.log('Disconnected!'),
 *   onError: (err) => console.error('WebSocket error:', err),
 * });
 *
 * useEffect(() => {
 *   const unsubscribe = on('message', (msg) => {
 *     console.log('Received:', msg);
 *   });
 *   return unsubscribe;
 * }, [on]);
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function useWebSocket(options: UseWebSocketOptions = {}) {
  const { autoConnect = true, onConnect, onDisconnect, onError } = options;

  useEffect(() => {
    if (autoConnect) {
      wsClient.connect();
    }

    if (onConnect) {
      wsClient.on('connect', onConnect);
    }
    if (onDisconnect) {
      wsClient.on('disconnect', onDisconnect);
    }
    if (onError) {
      wsClient.on('error', onError);
    }

    return () => {
      if (onConnect) {
        wsClient.off('connect', onConnect);
      }
      if (onDisconnect) {
        wsClient.off('disconnect', onDisconnect);
      }
      if (onError) {
        wsClient.off('error', onError);
      }
    };
  }, [autoConnect, onConnect, onDisconnect, onError]);

  const emit = useCallback((event: string, data?: any) => {
    wsClient.emit(event, data);
  }, []);

  const on = useCallback((event: string, handler: EventHandler) => {
    wsClient.on(event, handler);
    return () => wsClient.off(event, handler);
  }, []);

  const off = useCallback((event: string, handler: EventHandler) => {
    wsClient.off(event, handler);
  }, []);

  const isConnected = useCallback(() => {
    return wsClient.isConnected();
  }, []);

  return {
    emit,
    on,
    off,
    isConnected,
    connect: () => wsClient.connect(),
    disconnect: () => wsClient.disconnect(),
  };
}