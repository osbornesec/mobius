import { format, formatDistance, formatRelative, isValid, parseISO } from 'date-fns';

/****
 * Formats a date string or Date object using a specified format pattern.
 *
 * @description
 * Converts a date string (ISO format) or a Date object into a formatted string according to the provided format pattern. If the input is not a valid date, returns the string `'Invalid date'`.
 *
 * @param date - The date to format, as a string (ISO format) or a Date object.
 * @param formatStr - The format pattern to use (default: `'PPP'`).
 * @returns The formatted date string, or `'Invalid date'` if the input is invalid.
 *
 * @example
 * formatDate('2024-06-01'); // 'Jun 1, 2024'
 * formatDate(new Date(), 'yyyy-MM-dd'); // '2025-07-01'
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function formatDate(date: string | Date, formatStr = 'PPP'): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;

  if (!isValid(dateObj)) {
    return 'Invalid date';
  }

  return format(dateObj, formatStr);
}

/****
 * @description Formats a date as a human-readable relative time string (e.g., "2 hours ago") compared to a base date.
 * @param date - The date to format, as a string or Date object.
 * @param baseDate - The reference date to compare against. Defaults to the current date and time.
 * @returns A string representing the relative time difference between the input date and the base date, or "Invalid date" if the input is not a valid date.
 * @example
 * formatRelativeTime('2024-06-01T12:00:00Z'); // "about 1 month ago"
 * formatRelativeTime(new Date(), new Date(Date.now() - 3600000)); // "in about 1 hour"
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function formatRelativeTime(date: string | Date, baseDate = new Date()): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;

  if (!isValid(dateObj)) {
    return 'Invalid date';
  }

  return formatDistance(dateObj, baseDate, { addSuffix: true });
}

/**
 * Formats a date as a relative string (e.g., "yesterday at 3:00 PM") based on its distance from a base date.
 *
 * @param date - The date to format, as a string or Date object.
 * @param baseDate - The reference date to compare against. Defaults to the current date and time.
 * @returns A human-readable relative date string, or "Invalid date" if the input is not a valid date.
 *
 * @example
 * formatRelativeDate('2024-06-01T12:00:00Z'); // "last Saturday at 12:00 PM"
 * formatRelativeDate(new Date(), new Date('2024-06-01')); // "today at 12:00 AM"
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function formatRelativeDate(date: string | Date, baseDate = new Date()): string {
  const dateObj = typeof date === 'string' ? parseISO(date) : date;

  if (!isValid(dateObj)) {
    return 'Invalid date';
  }

  return formatRelative(dateObj, baseDate);
}

/**
 * Formats a date as a concise string suitable for display in tables or lists.
 *
 * @param date - The date to format, provided as a string or Date object.
 * @returns The formatted date string in the format 'MMM d, yyyy', or 'Invalid date' if the input is not a valid date.
 * @since 1.0.0
 *
 * @example
 * formatTableDate('2024-06-01'); // Returns 'Jun 1, 2024'
 * formatTableDate(new Date(2024, 5, 1)); // Returns 'Jun 1, 2024'
 *
 * Generated by CodeRabbit
 */
export function formatTableDate(date: string | Date): string {
  return formatDate(date, 'MMM d, yyyy');
}

/**
 * Formats a date string or Date object to include both date and time in a human-readable format.
 *
 * @param date - The date to format, as a string or Date object.
 * @returns A formatted string representing the date and time, or 'Invalid date' if the input is not a valid date.
 * @since 1.0.0
 *
 * @example
 * formatDateTime('2024-06-01T15:30:00Z'); // "Jun 1, 2024 at 3:30 PM"
 * formatDateTime(new Date()); // e.g., "Jul 10, 2025 at 10:15 AM"
 *
 * Generated by CodeRabbit
 */
export function formatDateTime(date: string | Date): string {
  return formatDate(date, 'PPP p');
}

/**
 * @description Converts a Date object to an ISO 8601 string for use in API requests.
 * @param date Date object to be formatted.
 * @returns The ISO string representation of the provided date.
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function formatForAPI(date: Date): string {
  return date.toISOString();
}
