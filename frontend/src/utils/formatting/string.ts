/**
 * String formatting utilities
 */

/****
 * @description
 * Truncates a string to a specified maximum length, appending a suffix if truncation occurs.
 *
 * @param str - The input string to be truncated.
 * @param length - The maximum allowed length of the resulting string, including the suffix.
 * @param suffix - The string to append if truncation occurs. Defaults to '...'.
 *
 * @returns The original string if its length is within the limit, or the truncated string with the suffix appended.
 *
 * @example
 * truncate('Hello, world!', 8); // Returns 'Hello...'
 * truncate('Short', 10);        // Returns 'Short'
 * truncate('abcdef', 5, '..');  // Returns 'abc..'
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function truncate(str: string, length: number, suffix = '...'): string {
  if (str.length <= length) {
    return str;
  }
  return str.slice(0, length - suffix.length) + suffix;
}

/**
 * @description Converts a string to title case, capitalizing the first letter of each word and making the rest of the letters lowercase.
 * @param {string} str - The input string to convert.
 * @returns {string} The title-cased version of the input string.
 * @example
 * toTitleCase('hello world'); // Returns 'Hello World'
 * toTitleCase('JAVASCRIPT is fun'); // Returns 'Javascript Is Fun'
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function toTitleCase(str: string): string {
  return str.replace(
    /\w\S*/g,
    (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
  );
}

/****
 * @description Converts a string to a URL-friendly slug by lowercasing, trimming whitespace, removing non-word characters (except spaces and hyphens), replacing spaces and underscores with hyphens, and trimming leading or trailing hyphens.
 * @param {string} str - The input string to convert to slug format.
 * @returns {string} The slugified version of the input string.
 * @example
 * slugify('Hello World!') // returns 'hello-world'
 * slugify('  My_Blog Post--2024  ') // returns 'my-blog-post-2024'
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function slugify(str: string): string {
  return str
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '')
    .replace(/[\s_-]+/g, '-')
    .replace(/^-+|-+$/g, '');
}

/**
 * @description Converts a camelCase string to kebab-case by inserting hyphens before uppercase letters and lowercasing the result.
 * @param {string} str - The camelCase input string to convert.
 * @returns {string} The resulting kebab-case string.
 * @example
 * camelToKebab('myVariableName'); // Returns 'my-variable-name'
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function camelToKebab(str: string): string {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
}

/****
 * @description Converts a kebab-case string to camelCase by removing hyphens and capitalizing the following letter.
 * @param str - The input string in kebab-case format (e.g., "my-example-string").
 * @returns The camelCase version of the input string (e.g., "myExampleString").
 * @example
 * kebabToCamel("my-example-string"); // Returns "myExampleString"
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function kebabToCamel(str: string): string {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}

/**
 * @description
 * Converts a file size in bytes to a human-readable string with appropriate units (e.g., KB, MB, GB).
 *
 * @param bytes - The file size in bytes to format.
 * @param decimals - Optional. The number of decimal places to include in the formatted output. Defaults to 2.
 * @returns A string representing the formatted file size with units.
 *
 * @example
 * formatFileSize(1536); // "1.5 KB"
 * formatFileSize(1048576, 1); // "1.0 MB"
 * formatFileSize(0); // "0 Bytes"
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function formatFileSize(bytes: number, decimals = 2): string {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

/****
 * @description
 * Extracts up to two uppercase initials from a full name string. Returns the first letter of the first and last words, or a single initial if only one word is present. Returns an empty string for empty input.
 *
 * @param {string} name - The full name from which to generate initials.
 * @returns {string} The initials in uppercase (maximum two characters).
 *
 * @example
 * getInitials('John Doe'); // Returns 'JD'
 * getInitials('Alice');    // Returns 'A'
 * getInitials('');         // Returns ''
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function getInitials(name: string): string {
  const parts = name.trim().split(/\s+/);
  if (parts.length === 0) return '';
  if (parts.length === 1) return parts[0].charAt(0).toUpperCase();
  return (parts[0].charAt(0) + parts[parts.length - 1].charAt(0)).toUpperCase();
}

/****
 * @description
 * Returns a string combining the count with the correct singular or plural form of a word.
 *
 * @param {number} count - The quantity to determine singular or plural form.
 * @param {string} singular - The singular form of the word.
 * @param {string} [plural] - The plural form of the word. If omitted, 's' is appended to the singular form.
 * @returns {string} The count followed by the appropriate singular or plural word.
 *
 * @example
 * pluralize(1, 'apple'); // "1 apple"
 * pluralize(3, 'apple'); // "3 apples"
 * pluralize(2, 'child', 'children'); // "2 children"
 *
 * @since 1.0.0
 * Generated by CodeRabbit
 */
export function pluralize(count: number, singular: string, plural?: string): string {
  if (count === 1) return `${count} ${singular}`;
  return `${count} ${plural || singular + 's'}`;
}