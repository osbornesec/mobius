[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mobius"
version = "0.1.0"
description = "Context Engineering Platform for AI Coding Assistants"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Michael", email = "michael@mobius.ai"},
]
maintainers = [
    {name = "Michael", email = "michael@mobius.ai"},
]
keywords = [
    "fastapi",
    "context-engineering",
    "ai-coding-assistant",
    "vector-database",
    "langchain",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.116.0,<0.117.0",
    "uvicorn[standard]>=0.35.0,<0.36.0",
    "pydantic>=2.11.7,<3.0.0",
    "pydantic-settings>=2.10.1,<3.0.0",
    "sqlalchemy>=2.0.41,<3.0.0",
    "alembic>=1.16.2,<2.0.0",
    "asyncpg>=0.30.0,<0.31.0",
    "psycopg2-binary>=2.9.10,<3.0.0",
    "pgvector>=0.2.4,<0.3.0",
    "qdrant-client>=1.14.3,<2.0.0",
    "pinecone-client>=6.0.0,<7.0.0",
    "chromadb>=1.0.15,<2.0.0",
    "redis[hiredis]>=6.2.0,<7.0.0",
    "celery>=5.5.3,<6.0.0",
    "flower>=2.0.1,<3.0.0",
    "boto3>=1.35.127,<2.0.0",
    "aiofiles>=24.2.1,<25.0.0",
    "python-jose[cryptography]>=3.4.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-multipart>=0.0.18,<0.1.0",
    "openai>=1.93.1,<2.0.0",
    "anthropic>=0.57.1,<1.0.0",
    "tiktoken>=0.8.1,<0.9.0",
    "langchain>=0.3.26,<0.4.0",
    "langchain-community>=0.3.14,<0.4.0",
    "numpy>=1.26.4,<2.0.0",
    "pandas>=2.2.4,<3.0.0",
    "scikit-learn>=1.6.1,<2.0.0",
    "httpx>=0.28.1,<0.29.0",
    "prometheus-client>=0.21.2,<0.22.0",
    "prometheus-fastapi-instrumentator>=7.0.0,<8.0.0",
    "sentry-sdk>=2.19.1,<3.0.0",
    "structlog>=25.4.0,<26.0.0",
    "python-dotenv>=1.0.1,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "click>=8.1.8,<9.0.0",
    "tenacity>=9.1.2,<10.0.0",
    "pydantic-extra-types>=2.12.0,<3.0.0",
    "email-validator>=2.2.0,<3.0.0",
    "orjson>=3.11.1,<4.0.0",
    "ujson>=5.11.0,<6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1,<9.0.0",
    "pytest-asyncio>=0.25.0,<0.26.0",
    "pytest-cov>=6.0.2,<7.0.0",
    "pytest-env>=1.1.5,<2.0.0",
    "pytest-mock>=3.16.0,<4.0.0",
    "faker>=33.4.0,<34.0.0",
    "factory-boy>=3.3.1,<4.0.0",
    "respx>=0.21.1,<0.22.0",
    "black>=25.1.0,<26.0.0",
    "ruff>=0.12.2,<0.13.0",
    "isort>=5.13.2,<6.0.0",
    "pre-commit>=4.2.0,<5.0.0",
    "mypy>=1.16.1,<2.0.0",
    "types-python-jose>=3.3.5,<4.0.0",
    "types-passlib>=1.7.8,<2.0.0",
    "types-python-dotenv>=1.0.0,<2.0.0",
    "types-pyyaml>=6.0.15,<7.0.0",
    "types-redis>=4.6.7,<5.0.0",
    "types-requests>=2.32.1,<3.0.0",
    "ipython>=8.32.0,<9.0.0",
    "ipdb>=0.13.14,<0.14.0",
    "rich>=14.0.2,<15.0.0",
    "watchfiles>=1.1.0,<2.0.0",
    "py-spy>=0.3.17,<0.4.0",
    "memory-profiler>=0.62.1,<0.63.0",
    "line-profiler>=4.2.1,<5.0.0",
    "bandit>=1.8.1,<2.0.0",
    "safety>=3.4.1,<4.0.0",
    "sqlalchemy-utils>=0.42.3,<0.43.0",
    "alembic-autogenerate-enums>=0.1.3,<0.2.0",
    "locust>=2.34.0,<3.0.0",
]

docs = [
    "mkdocs>=1.6.3,<2.0.0",
    "mkdocs-material>=9.7.1,<10.0.0",
    "mkdocstrings[python]>=0.29.1,<0.30.0",
]

[project.urls]
Homepage = "https://github.com/michael/mobius"
Documentation = "https://mobius.readthedocs.io"
Repository = "https://github.com/michael/mobius.git"
"Bug Tracker" = "https://github.com/michael/mobius/issues"

[project.scripts]
mobius = "mobius.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "mobius*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
mobius = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4
extend-include = ["*.pyi?"]
respect-gitignore = true
force-exclude = false
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
]

[tool.ruff.lint]
# Enable ALL rule categories with strict settings
select = ["ALL"]
ignore = [
    "E501",     # line too long, handled by formatter
    "D203",     # one-blank-line-before-class (incompatible with D211)
    "D213",     # multi-line-summary-second-line (incompatible with D212)
    "COM812",   # missing-trailing-comma (conflicts with formatter)
    "ISC001",   # single-line-implicit-string-concatenation (conflicts with formatter)
    "ANN101",   # missing-type-self (deprecated)
    "ANN102",   # missing-type-cls (deprecated)
    "FBT",      # flake8-boolean-trap (too strict for general use)
    "G004",     # logging-f-string (performance not critical)
    "EM",       # flake8-errmsg (too strict)
    "TRY003",   # raise-vanilla-args (too strict)
    "S101",     # assert-used (needed for tests)
    "PLR0913",  # too-many-arguments (sometimes necessary)
    "PLR2004",  # magic-value-comparison (too strict)
    "PD",       # pandas-vet (not using pandas everywhere)
]

# All rules are fixable by default
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Preview mode for experimental rules
preview = true
explicit-preview-rules = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]
"tests/**/*.py" = [
    "S101",     # assert-used
    "ARG",      # flake8-unused-arguments
    "FBT",      # flake8-boolean-trap
    "PLR2004",  # magic-value-comparison
    "PLR6301",  # no-self-use
    "SLF001",   # private-member-access
    "D",        # pydocstyle (tests don't need docstrings)
    "ANN",      # annotations (tests don't need type hints)
    "T20",      # flake8-print (allow print in tests)
]
"scripts/**/*.py" = ["T20", "INP001"]  # Allow print and missing __init__.py in scripts
"alembic/**/*.py" = ["INP001"]  # Missing __init__.py in alembic
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.lint.isort]
known-first-party = ["app", "mobius"]
known-third-party = ["fastapi", "pydantic", "sqlalchemy"]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50
max-nested-blocks = 5
max-public-methods = 20
max-attributes = 10

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
suppress-dummy-args = true
suppress-none-returning = false

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase"]
runtime-evaluated-decorators = ["attrs.define", "attrs.frozen"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.TypedDict" = "Use typing_extensions.TypedDict for Python < 3.12 compatibility"
"typing.Literal" = "Use typing_extensions.Literal for Python < 3.8 compatibility"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"
avoid-escape = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = false

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id", "format", "input", "type", "object", "filter", "map"]

[tool.ruff.lint.flake8-simplify]
max-fix-length = 100

[tool.ruff.lint.flake8-import-conventions.aliases]
datetime = "dt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
"matplotlib.pyplot" = "plt"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "flower.*",
    "qdrant_client.*",
    "pinecone.*",
    "chromadb.*",
    "pgvector.*",
    "langchain.*",
    "langchain_community.*",
    "prometheus_fastapi_instrumentator.*",
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov=mobius",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app", "mobius"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@abstractmethod",
]

[tool.isort]
profile = "black"
line_length = 88
known_third_party = ["fastapi", "pydantic", "sqlalchemy"]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection tests

[tool.pylint.messages_control]
disable = "C0330, C0326"

[tool.pylint.format]
max-line-length = "88"