"""
Unit tests for backend configuration module.

This module provides comprehensive tests for the configuration management system,
including environment variable loading, validation, environment-specific settings,
and sensitive data handling.
"""

import os
from typing import Any, Dict
from unittest.mock import patch

import pytest
from pydantic import ValidationError

# Import the actual implementation
from app.core.config import DatabaseConfig, RedisConfig, SecurityConfig, Settings


# Test fixtures
@pytest.fixture
def clean_env(monkeypatch):
    """
    Removes all environment variables that start with the 'MOBIUS_' prefix from the current environment.
    
    Args:
        monkeypatch: The pytest monkeypatch fixture used to modify environment variables during testing.
    
    Generated by CodeRabbit
    """
    for key in list(os.environ.keys()):
        if key.startswith("MOBIUS_"):
            monkeypatch.delenv(key, raising=False)


@pytest.fixture
def basic_env(monkeypatch):
    """
    Sets the minimal required environment variables for database URL and security secret key for testing purposes.
    
    Args:
        monkeypatch (MonkeyPatch): pytest fixture for safely setting environment variables during tests.
    
    Generated by CodeRabbit
    """
    monkeypatch.setenv("MOBIUS_DATABASE__URL", "postgresql://user:pass@localhost/mobius")
    monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "test-secret-key-123")


@pytest.fixture
def full_env(monkeypatch):
    """
    Sets up a comprehensive set of environment variables for testing the configuration system.
    
    Args:
        monkeypatch (pytest.MonkeyPatch): The pytest monkeypatch fixture used to set environment variables.
    
    Returns:
        None
    
    Example:
        def test_with_full_env(full_env):
            # All relevant MOBIUS_* environment variables are set for this test
            ...
    
    Generated by CodeRabbit
    """
    env_vars = {
        "MOBIUS_APP_NAME": "Test Mobius",
        "MOBIUS_ENVIRONMENT": "test",
        "MOBIUS_DEBUG": "true",
        "MOBIUS_HOST": "127.0.0.1",
        "MOBIUS_PORT": "8080",
        "MOBIUS_DATABASE__URL": "postgresql://test:password@localhost/test_db",
        "MOBIUS_DATABASE__POOL_SIZE": "5",
        "MOBIUS_DATABASE__MAX_OVERFLOW": "10",
        "MOBIUS_REDIS__URL": "redis://localhost:6379/1",
        "MOBIUS_REDIS__TTL": "7200",
        "MOBIUS_SECURITY__SECRET_KEY": "super-secret-test-key",
        "MOBIUS_SECURITY__JWT_ALGORITHM": "HS512",
        "MOBIUS_SECURITY__JWT_EXPIRATION_MINUTES": "60",
        "MOBIUS_SECURITY__ALLOWED_ORIGINS": '["http://localhost:3000","http://localhost:5173"]',
        "MOBIUS_ENABLE_ANALYTICS": "false",
        "MOBIUS_ENABLE_CACHE": "false",
    }
    for key, value in env_vars.items():
        monkeypatch.setenv(key, value)


class TestConfigurationLoading:
    """Test configuration loading from environment variables."""
    
    def test_load_minimal_config(self, clean_env, basic_env):
        """
        Tests that the configuration loads correctly when only the minimal required environment variables are set.
        
        Args:
            clean_env: Pytest fixture that clears MOBIUS_* environment variables before the test.
            basic_env: Pytest fixture that sets the minimal required environment variables for the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If any of the default or required configuration values are not set as expected.
        
        Example:
            def test_load_minimal_config(self, clean_env, basic_env):
                settings = Settings()
                assert settings.app_name == "Mobius Context Platform"
                assert settings.environment == "development"
                assert settings.debug is False
                assert settings.port == 8000
                assert settings.database.url == "postgresql://user:pass@localhost/mobius"
                assert settings.security.secret_key.get_secret_value() == "test-secret-key-123"
        
        Generated by CodeRabbit
        """
        settings = Settings()
        
        # Check defaults are applied
        assert settings.app_name == "Mobius Context Platform"
        assert settings.environment == "development"
        assert settings.debug is False
        assert settings.port == 8000
        
        # Check required fields are loaded
        assert settings.database.url == "postgresql://user:pass@localhost/mobius"
        assert settings.security.secret_key.get_secret_value() == "test-secret-key-123"
    
    def test_load_full_config(self, clean_env, full_env):
        """
        Tests that the configuration loads correctly when all environment variables are set, verifying that each field matches the expected value for application, database, Redis, security, and feature flag settings.
        
        Args:
            clean_env: Fixture that clears relevant environment variables before the test.
            full_env: Fixture that sets all required and optional environment variables for a full configuration.
        
        Generated by CodeRabbit
        """
        settings = Settings()
        
        # Application settings
        assert settings.app_name == "Test Mobius"
        assert settings.environment == "test"
        assert settings.debug is True
        assert settings.host == "127.0.0.1"
        assert settings.port == 8080
        
        # Database settings
        assert settings.database.url == "postgresql://test:password@localhost/test_db"
        assert settings.database.pool_size == 5
        assert settings.database.max_overflow == 10
        
        # Redis settings
        assert settings.redis.url == "redis://localhost:6379/1"
        assert settings.redis.ttl == 7200
        
        # Security settings
        assert settings.security.secret_key.get_secret_value() == "super-secret-test-key"
        assert settings.security.jwt_algorithm == "HS512"
        assert settings.security.jwt_expiration_minutes == 60
        assert settings.security.allowed_origins == ["http://localhost:3000", "http://localhost:5173"]
        
        # Feature flags
        assert settings.enable_analytics is False
        assert settings.enable_cache is False
    
    def test_env_var_override_defaults(self, clean_env, basic_env, monkeypatch):
        """
        Tests that environment variables correctly override default configuration values for the application.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables before the test.
            basic_env: Fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for safely modifying environment variables during the test.
        
        Returns:
            None
        
        Example:
            This test first asserts that the default port is 8000 when no environment variable is set. It then sets the MOBIUS_PORT environment variable to 9000 and verifies that the Settings instance reflects the overridden value.
        
        Generated by CodeRabbit
        """
        # First load with defaults
        settings1 = Settings()
        assert settings1.port == 8000
        
        # Set env var and reload
        monkeypatch.setenv("MOBIUS_PORT", "9000")
        settings2 = Settings()
        assert settings2.port == 9000
    
    def test_missing_required_fields(self, clean_env):
        """
        Tests that omitting required environment variables results in validation errors when initializing the Settings object.
        
        Args:
            clean_env: Fixture that clears relevant environment variables before the test.
        
        Raises:
            ValidationError: If required fields such as database URL and security secret key are missing.
        
        Example:
            def test_missing_required_fields(self, clean_env):
                with pytest.raises(ValidationError):
                    Settings()
        
        Generated by CodeRabbit
        """
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        # Should have errors for missing database URL and security secret key
        assert len(errors) >= 2
        
        error_fields = [error["loc"] for error in errors]
        assert ("database", "url") in error_fields
        assert ("security", "secret_key") in error_fields
    
    def test_nested_env_delimiter(self, clean_env, monkeypatch):
        """
        Tests that nested configuration fields can be set using environment variables with double underscore delimiters.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables before the test.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Returns:
            None
        
        Example:
            Setting environment variables like "MOBIUS_DATABASE__URL" allows nested configuration fields to be populated in the Settings object.
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "postgresql://nested@localhost/db")
        monkeypatch.setenv("MOBIUS_DATABASE__POOL_SIZE", "15")
        monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "nested-secret")
        
        settings = Settings()
        assert settings.database.url == "postgresql://nested@localhost/db"
        assert settings.database.pool_size == 15
    
    def test_case_insensitive_env_vars(self, clean_env, basic_env, monkeypatch):
        """
        Tests that environment variables for configuration are interpreted in a case-insensitive manner.
        
        Args:
            clean_env: Fixture that clears MOBIUS-prefixed environment variables.
            basic_env: Fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If the settings do not reflect the expected values from case-insensitive environment variables.
        
        Example:
            monkeypatch.setenv("mobius_port", "7777")
            monkeypatch.setenv("MOBIUS_HOST", "0.0.0.0")
            settings = Settings()
            assert settings.port == 7777
            assert settings.host == "0.0.0.0"
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("mobius_port", "7777")
        monkeypatch.setenv("MOBIUS_HOST", "0.0.0.0")
        
        settings = Settings()
        assert settings.port == 7777
        assert settings.host == "0.0.0.0"


class TestConfigurationValidation:
    """Test configuration value validation."""
    
    def test_database_url_validation(self, clean_env, monkeypatch):
        """
        Validates that the database URL environment variable is accepted only for supported formats and raises a validation error for invalid formats.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables before the test.
            monkeypatch: pytest fixture for temporarily setting environment variables.
        
        Raises:
            ValidationError: If the database URL is not in a supported format (only PostgreSQL and SQLite URLs are accepted).
        
        Example:
            # Valid PostgreSQL URL
            monkeypatch.setenv("MOBIUS_DATABASE__URL", "postgresql://user:pass@host/db")
            settings = Settings()
            assert settings.database.url == "postgresql://user:pass@host/db"
        
            # Invalid URL raises ValidationError
            monkeypatch.setenv("MOBIUS_DATABASE__URL", "mysql://user:pass@host/db")
            with pytest.raises(ValidationError):
                Settings()
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "test-key")
        
        # Valid PostgreSQL URL
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "postgresql://user:pass@host/db")
        settings = Settings()
        assert settings.database.url == "postgresql://user:pass@host/db"
        
        # Valid SQLite URL
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "sqlite:///path/to/db.sqlite")
        settings = Settings()
        assert settings.database.url == "sqlite:///path/to/db.sqlite"
        
        # Invalid URL
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "mysql://user:pass@host/db")
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        assert any("Invalid database URL format" in str(error) for error in errors)
    
    def test_port_range_validation(self, clean_env, basic_env, monkeypatch):
        """
        Tests that the port number in the configuration is validated to be within the allowed range (1-65535).
        
        Args:
            clean_env: pytest fixture that clears MOBIUS_* environment variables.
            basic_env: pytest fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Raises:
            ValidationError: If the port number is set outside the valid range.
        
        Example:
            # Valid port
            monkeypatch.setenv("MOBIUS_PORT", "3000")
            settings = Settings()
            assert settings.port == 3000
        
            # Invalid port (too low)
            monkeypatch.setenv("MOBIUS_PORT", "0")
            with pytest.raises(ValidationError):
                Settings()
        
            # Invalid port (too high)
            monkeypatch.setenv("MOBIUS_PORT", "70000")
            with pytest.raises(ValidationError):
                Settings()
        
        Generated by CodeRabbit
        """
        # Valid port
        monkeypatch.setenv("MOBIUS_PORT", "3000")
        settings = Settings()
        assert settings.port == 3000
        
        # Port too low
        monkeypatch.setenv("MOBIUS_PORT", "0")
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        assert any("greater than or equal to 1" in str(error) for error in errors)
        
        # Port too high
        monkeypatch.setenv("MOBIUS_PORT", "70000")
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        assert any("less than or equal to 65535" in str(error) for error in errors)
    
    def test_environment_validation(self, clean_env, basic_env, monkeypatch):
        """
        Tests that the environment configuration value is validated against allowed options.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables.
            basic_env: Fixture to set minimal required environment variables.
            monkeypatch: Pytest fixture for modifying environment variables during the test.
        
        Raises:
            ValidationError: If an invalid environment value is provided.
        
        Example:
            # This test will pass for valid environments and raise ValidationError for invalid ones.
            test_environment_validation(clean_env, basic_env, monkeypatch)
        
        Generated by CodeRabbit
        """
        # Valid environments
        for env in ["development", "staging", "production", "test"]:
            monkeypatch.setenv("MOBIUS_ENVIRONMENT", env)
            settings = Settings()
            assert settings.environment == env
        
        # Invalid environment
        monkeypatch.setenv("MOBIUS_ENVIRONMENT", "invalid")
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        assert any("Environment must be one of" in str(error) for error in errors)
    
    def test_boolean_parsing(self, clean_env, basic_env, monkeypatch):
        """
        Tests that boolean values for the debug setting are correctly parsed from various string representations in environment variables.
        
        Args:
            clean_env: Pytest fixture that clears MOBIUS_* environment variables before the test.
            basic_env: Pytest fixture that sets minimal required environment variables.
            monkeypatch: Pytest fixture for modifying environment variables during the test.
        
        Generated by CodeRabbit
        """
        # True values
        for value in ["true", "True", "TRUE", "1", "yes", "Yes"]:
            monkeypatch.setenv("MOBIUS_DEBUG", value)
            settings = Settings()
            assert settings.debug is True
        
        # False values
        for value in ["false", "False", "FALSE", "0", "no", "No"]:
            monkeypatch.setenv("MOBIUS_DEBUG", value)
            settings = Settings()
            assert settings.debug is False
    
    def test_json_list_parsing(self, clean_env, basic_env, monkeypatch):
        """
        Tests that JSON lists are correctly parsed from environment variables and that invalid JSON raises a ValidationError.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables.
            basic_env: Fixture to set minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Raises:
            ValidationError: If the environment variable contains invalid JSON.
        
        Example:
            monkeypatch.setenv("MOBIUS_SECURITY__ALLOWED_ORIGINS", '["http://example.com"]')
            settings = Settings()
            assert settings.security.allowed_origins == ["http://example.com"]
        
            monkeypatch.setenv("MOBIUS_SECURITY__ALLOWED_ORIGINS", "not-json")
            with pytest.raises(ValidationError):
                Settings()
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_SECURITY__ALLOWED_ORIGINS", '["http://example.com","https://app.example.com"]')
        settings = Settings()
        assert settings.security.allowed_origins == ["http://example.com", "https://app.example.com"]
        
        # Invalid JSON should raise error
        monkeypatch.setenv("MOBIUS_SECURITY__ALLOWED_ORIGINS", "not-json")
        with pytest.raises(ValidationError):
            Settings()


class TestEnvironmentConfigurations:
    """Test different environment-specific configurations."""
    
    def test_development_config(self, clean_env, basic_env, monkeypatch):
        """
        Tests that the configuration loads correctly for the development environment.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables.
            basic_env: Fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables.
        
        Returns:
            None
        
        Example:
            def test_development_config(self, clean_env, basic_env, monkeypatch):
                monkeypatch.setenv("MOBIUS_ENVIRONMENT", "development")
                settings = Settings()
                assert settings.environment == "development"
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_ENVIRONMENT", "development")
        settings = Settings()
        
        assert settings.environment == "development"
        # In a real implementation, debug might be auto-enabled for development
        # This is just an example of environment-specific testing
    
    def test_production_config(self, clean_env, basic_env, monkeypatch):
        """
        Tests that the configuration loads correctly for the production environment and verifies the environment field is set to 'production'. Also checks that attempting to enable debug mode via environment variable is handled as expected.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables before the test.
            basic_env: Fixture to set minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_ENVIRONMENT", "production")
        monkeypatch.setenv("MOBIUS_DEBUG", "true")  # Try to enable debug
        
        settings = Settings()
        assert settings.environment == "production"
        # In a real implementation, you might want to force debug=False in production
        # regardless of the env var setting
    
    def test_test_config(self, clean_env, monkeypatch):
        """
        Tests that the configuration for the test environment is loaded correctly, including environment-specific database URL and secret key.
        
        Args:
            clean_env (fixture): Fixture to clear MOBIUS_* environment variables before the test.
            monkeypatch (fixture): Pytest fixture for patching environment variables.
        
        Returns:
            None
        
        Raises:
            AssertionError: If the environment or database URL is not set as expected.
        
        Example:
            def test_test_config(self, clean_env, monkeypatch):
                monkeypatch.setenv("MOBIUS_ENVIRONMENT", "test")
                monkeypatch.setenv("MOBIUS_DATABASE__URL", "sqlite:///test.db")
                monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "test-only-key")
                settings = Settings()
                assert settings.environment == "test"
                assert "test" in settings.database.url
        
        Generated by CodeRabbit
        """
        # Test environment might use different database
        monkeypatch.setenv("MOBIUS_ENVIRONMENT", "test")
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "sqlite:///test.db")
        monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "test-only-key")
        
        settings = Settings()
        assert settings.environment == "test"
        assert "test" in settings.database.url


class TestSensitiveDataHandling:
    """Test handling of sensitive configuration data."""
    
    def test_secret_fields_not_exposed(self, clean_env, basic_env):
        """
        Tests that secret fields in the configuration are not exposed in string representations, ensuring sensitive values remain protected while still accessible through secure methods.
        
        Args:
            clean_env: Fixture that clears relevant environment variables before the test.
            basic_env: Fixture that sets minimal required environment variables for the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If secret values are exposed in string representations or not accessible via secure methods.
        
        Example:
            settings = Settings()
            # Access secret value securely
            secret = settings.security.secret_key.get_secret_value()
            # Ensure secret is not exposed in string representation
            assert "actual-secret" not in str(settings.security.secret_key)
        
        Generated by CodeRabbit
        """
        settings = Settings()
        
        # Secret value should be accessible via get_secret_value()
        assert settings.security.secret_key.get_secret_value() == "test-secret-key-123"
        
        # But not in string representation
        secret_str = str(settings.security.secret_key)
        assert "test-secret-key-123" not in secret_str
        assert "**********" in secret_str or "SecretStr" in secret_str
    
    def test_settings_repr_safe(self, clean_env, basic_env):
        """
        Verifies that the string representation of the Settings object does not expose sensitive data such as secret keys or database URLs.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables.
            basic_env: Fixture that sets minimal required environment variables.
        
        Returns:
            None
        
        Raises:
            AssertionError: If sensitive data is found in the repr output or if expected identifying information is missing.
        
        Example:
            def test_settings_repr_safe(self, clean_env, basic_env):
                settings = Settings()
                repr_str = repr(settings)
                assert "my-secret-key" not in repr_str
                assert settings.database.url not in repr_str
                assert "Settings" in repr_str
                assert "environment=" in repr_str
        
        Generated by CodeRabbit
        """
        settings = Settings()
        repr_str = repr(settings)
        
        # Should not contain secret values
        assert "test-secret-key-123" not in repr_str
        assert settings.database.url not in repr_str
        
        # Should contain safe identifying information
        assert "Settings" in repr_str
        assert "environment=" in repr_str
    
    def test_no_secrets_in_validation_errors(self, clean_env, monkeypatch):
        """
        Verifies that secret values are not exposed in validation error messages when configuration validation fails.
        
        Args:
            clean_env: Fixture that clears relevant environment variables before the test.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Raises:
            AssertionError: If the secret value appears in the validation error message.
        
        Example:
            This test sets an invalid database URL and a secret key, then asserts that the secret key value does not appear in the resulting validation error message.
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_DATABASE__URL", "invalid-url")
        monkeypatch.setenv("MOBIUS_SECURITY__SECRET_KEY", "super-secret-value")
        
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        error_str = str(exc_info.value)
        # Secret value should not appear in error messages
        assert "super-secret-value" not in error_str
    
    def test_dict_export_with_secrets(self, clean_env, basic_env):
        """
        Tests that exporting the settings object to a dictionary preserves secret fields as `SecretStr` objects, ensuring sensitive values are not exposed in the output.
        
        Args:
            clean_env: Fixture that clears relevant environment variables before the test.
            basic_env: Fixture that sets minimal required environment variables for the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If secret fields are not preserved as `SecretStr` objects in the exported dictionary.
        
        Example:
            settings = Settings()
            settings_dict = settings.model_dump()
            # settings_dict["security"]["secret_key"] is a SecretStr, not a raw string
        
        Generated by CodeRabbit
        """
        settings = Settings()
        
        # Standard dict export should not expose secrets
        settings_dict = settings.model_dump()
        assert isinstance(settings_dict["security"]["secret_key"], SecretStr)
        
        # Explicit mode to show secrets (use with caution)
        settings_dict_with_secrets = settings.model_dump(mode="python")
        # SecretStr should still be SecretStr object, not raw value
        assert isinstance(settings_dict_with_secrets["security"]["secret_key"], SecretStr)


class TestConfigurationEdgeCases:
    """Test edge cases and error scenarios."""
    
    def test_empty_string_env_vars(self, clean_env, basic_env, monkeypatch):
        """
        Tests that environment variables set to empty strings override default configuration values.
        
        Args:
            clean_env: Fixture that clears MOBIUS-prefixed environment variables.
            basic_env: Fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_APP_NAME", "")
        
        settings = Settings()
        # Empty string should be treated as empty, not use default
        assert settings.app_name == ""
    
    def test_extra_env_vars_ignored(self, clean_env, basic_env, monkeypatch):
        """
        Tests that unknown or extra environment variables prefixed with 'MOBIUS_' do not cause errors and are ignored by the Settings class.
        
        Args:
            clean_env: Fixture that removes all MOBIUS_ environment variables before the test.
            basic_env: Fixture that sets the minimal required environment variables for configuration.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If unknown environment variables are not ignored or appear as attributes on the Settings instance.
        
        Example:
            monkeypatch.setenv("MOBIUS_UNKNOWN_FIELD", "should-be-ignored")
            settings = Settings()
            assert not hasattr(settings, "unknown_field")
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_UNKNOWN_FIELD", "should-be-ignored")
        monkeypatch.setenv("MOBIUS_ANOTHER_UNKNOWN", "also-ignored")
        
        # Should not raise an error
        settings = Settings()
        assert not hasattr(settings, "unknown_field")
        assert not hasattr(settings, "another_unknown")
    
    def test_env_file_loading(self, clean_env, tmp_path, monkeypatch):
        """
        Tests that configuration settings are correctly loaded from a `.env` file located in the current working directory.
        
        Args:
            clean_env: Fixture to clear relevant environment variables before the test.
            tmp_path: Temporary directory fixture for creating the `.env` file.
            monkeypatch: Pytest fixture for modifying environment and working directory.
        
        Returns:
            None
        
        Raises:
            AssertionError: If the loaded settings do not match the values specified in the `.env` file.
        
        Example:
            The test creates a `.env` file with specific configuration values, changes the working directory to the file's location, and asserts that the `Settings` object loads the expected values from the file.
        
        Generated by CodeRabbit
        """
        # Create a temporary .env file
        env_file = tmp_path / ".env"
        env_file.write_text("""
MOBIUS_DATABASE__URL=postgresql://envfile:pass@localhost/db
MOBIUS_SECURITY__SECRET_KEY=env-file-secret
MOBIUS_PORT=4321
""")
        
        # Change to temp directory
        monkeypatch.chdir(tmp_path)
        
        settings = Settings()
        assert settings.database.url == "postgresql://envfile:pass@localhost/db"
        assert settings.port == 4321
    
    def test_env_var_precedence(self, clean_env, tmp_path, monkeypatch):
        """
        Tests that environment variables override values specified in a `.env` file when both are present.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables before the test.
            tmp_path: Temporary directory fixture for creating the .env file.
            monkeypatch: Pytest fixture for patching environment variables and working directory.
        
        Returns:
            None
        
        Raises:
            AssertionError: If the environment variable does not take precedence over the .env file as expected.
        
        Example:
            # .env contains MOBIUS_PORT=1111, but environment variable is set to 2222
            # The resulting settings.port should be 2222, not 1111.
        
        Generated by CodeRabbit
        """
        # Create .env file
        env_file = tmp_path / ".env"
        env_file.write_text("""
MOBIUS_PORT=1111
MOBIUS_DATABASE__URL=postgresql://file:pass@localhost/db
MOBIUS_SECURITY__SECRET_KEY=file-secret
""")
        
        monkeypatch.chdir(tmp_path)
        
        # Set environment variable that should override .env
        monkeypatch.setenv("MOBIUS_PORT", "2222")
        
        settings = Settings()
        assert settings.port == 2222  # From env var, not .env file
        assert settings.database.url == "postgresql://file:pass@localhost/db"  # From .env file
    
    def test_invalid_json_in_env_var(self, clean_env, basic_env, monkeypatch):
        """
        Tests that providing invalid JSON in an environment variable results in a validation error.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables.
            basic_env: Fixture that sets minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables.
        
        Raises:
            ValidationError: If the environment variable contains invalid JSON.
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_SECURITY__ALLOWED_ORIGINS", "[invalid json")
        
        with pytest.raises(ValidationError) as exc_info:
            Settings()
        
        errors = exc_info.value.errors()
        assert any("json" in str(error).lower() for error in errors)
    
    def test_numeric_string_conversion(self, clean_env, basic_env, monkeypatch):
        """
        Tests that numeric string values from environment variables are correctly converted to integers in the configuration settings.
        
        Args:
            clean_env: Fixture to clear MOBIUS_* environment variables before the test.
            basic_env: Fixture to set minimal required environment variables.
            monkeypatch: pytest fixture for modifying environment variables during the test.
        
        Returns:
            None
        
        Raises:
            AssertionError: If the numeric string values are not converted to integers as expected.
        
        Example:
            monkeypatch.setenv("MOBIUS_DATABASE__POOL_SIZE", "25")
            monkeypatch.setenv("MOBIUS_REDIS__TTL", "1800")
            settings = Settings()
            assert settings.database.pool_size == 25
            assert isinstance(settings.database.pool_size, int)
            assert settings.redis.ttl == 1800
            assert isinstance(settings.redis.ttl, int)
        
        Generated by CodeRabbit
        """
        monkeypatch.setenv("MOBIUS_DATABASE__POOL_SIZE", "25")
        monkeypatch.setenv("MOBIUS_REDIS__TTL", "1800")
        
        settings = Settings()
        assert settings.database.pool_size == 25
        assert isinstance(settings.database.pool_size, int)
        assert settings.redis.ttl == 1800
        assert isinstance(settings.redis.ttl, int)
    
    def test_settings_immutability(self, clean_env, basic_env):
        """
        Tests that the Settings instance is immutable and raises an AttributeError when attempting to modify its attributes.
        
        Args:
            clean_env: Fixture that clears MOBIUS_* environment variables.
            basic_env: Fixture that sets minimal required environment variables.
        
        Raises:
            AttributeError: If an attempt is made to modify an attribute of the Settings instance.
        
        Example:
            settings = Settings()
            settings.port = 9999  # Raises AttributeError
        
        Generated by CodeRabbit
        """
        settings = Settings()
        
        # Pydantic models are immutable by default in v2
        with pytest.raises(AttributeError):
            settings.port = 9999


# Module-level tests
def test_settings_can_be_imported():
    """
    Verifies that the Settings class can be successfully imported from the application's configuration module.
    
    Generated by CodeRabbit
    """
    from app.core.config import Settings
    assert Settings is not None


def test_settings_singleton_pattern():
    """
    Tests the singleton pattern behavior of the settings retrieval and reset functions.
    
    Ensures that repeated calls to `get_settings()` return the same instance, and that calling `reset_settings()` causes a new instance to be created on subsequent retrieval.
    
    Generated by CodeRabbit
    """
    from app.core.config import get_settings, reset_settings
    
    # Reset to ensure clean state
    reset_settings()
    
    # Get settings twice
    settings1 = get_settings()
    settings2 = get_settings()
    
    # Should be the same instance
    assert settings1 is settings2
    
    # Reset and get again
    reset_settings()
    settings3 = get_settings()
    
    # Should be a different instance after reset
    assert settings1 is not settings3


if __name__ == "__main__":
    pytest.main([__file__, "-v"])