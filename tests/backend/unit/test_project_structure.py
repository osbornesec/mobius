"""
Comprehensive project structure tests for the Mobius Context Engineering Platform.

This module validates that the project structure follows best practices and ensures:
1. All required project directories exist
2. All modules can be imported without errors
3. No circular dependencies exist
4. __init__.py files are present where needed

The tests verify both the backend (FastAPI in app/) and frontend (React in frontend/)
structures, as well as test directories and documentation.
"""

import ast
import importlib
import os
import sys
from pathlib import Path
from typing import Dict, List, Set

try:
    import pytest
except ImportError:
    # Make tests runnable without pytest
    class pytest:
        @staticmethod
        def fail(msg):
            """
            Raises an AssertionError with the provided message.

            Args:
                msg (str): The error message to include in the AssertionError.

            Raises:
                AssertionError: Always raised with the given message.

            Generated by CodeRabbit
            """
            raise AssertionError(msg)

        @staticmethod
        def skip(msg):
            """
            Prints a message indicating that a test or operation has been skipped.

            Args:
                msg (str): The message describing the reason for skipping.

            Generated by CodeRabbit
            """
            print(f"SKIPPED: {msg}")


class TestProjectDirectories:
    """Test suite for validating project directory structure."""

    def test_backend_app_structure_exists(self, project_root: Path):
        """
        Verifies that all required backend and app subdirectories exist within the project structure.

        Args:
            project_root (Path): The root directory of the project to validate.

        Raises:
            AssertionError: If any required backend directory is missing or is not a directory.

        Generated by CodeRabbit
        """
        backend_dirs = [
            "app",
            "app/agents",
            "app/agents/context_builder",
            "app/agents/orchestrator",
            "app/agents/retrieval",
            "app/agents/code_generator",
            "app/analytics",
            "app/analytics/collectors",
            "app/analytics/metrics",
            "app/analytics/reporting",
            "app/api",
            "app/core",
            "app/integrations",
            "app/integrations/github",
            "app/integrations/vscode",
            "app/integrations/anthropic",
            "app/integrations/openai",
            "app/processing",
            "app/processing/chunkers",
            "app/processing/embedders",
            "app/processing/parsers",
            "app/processing/pipelines",
            "app/repositories",
            "app/services",
            "app/services/agent_coordinator",
            "app/services/context_engine",
            "app/services/prompt_engine",
            "app/services/response_formatter",
            "app/services/vector_store",
            "app/storage",
            "app/storage/object",
            "app/storage/vector",
            "app/utils",
        ]

        for dir_path in backend_dirs:
            full_path = project_root / dir_path
            assert full_path.exists(), f"Backend directory '{dir_path}' does not exist"
            assert full_path.is_dir(), f"'{dir_path}' should be a directory"

    def test_frontend_src_structure_exists(self, project_root: Path):
        """
        Checks that the frontend source directory and its required subdirectories exist within the project structure.

        Args:
            project_root (Path): The root directory of the project to validate.

        Raises:
            AssertionError: If any required frontend directory does not exist or is not a directory.

        Generated by CodeRabbit
        """
        frontend_dirs = [
            "frontend",
            "frontend/src",
            "frontend/src/store",
            "frontend/src/test",
            # Additional root-level frontend directories
            "src",  # Shared components at root
            "src/api",
            "src/components",
            "src/features",
            "src/hooks",
            "src/pages",
            "src/services",
            "src/store",
            "src/styles",
            "src/types",
            "src/utils",
        ]

        for dir_path in frontend_dirs:
            full_path = project_root / dir_path
            assert full_path.exists(), f"Frontend directory '{dir_path}' does not exist"
            assert full_path.is_dir(), f"'{dir_path}' should be a directory"

    def test_tests_directories_exist(self, project_root: Path):
        """
        Checks that all required test directories exist and have the correct directory structure.

        Args:
            project_root (Path): The root path of the project to validate.

        Raises:
            AssertionError: If any expected test directory is missing or is not a directory.

        Generated by CodeRabbit
        """
        test_dirs = [
            "tests",
            "tests/backend",
            "tests/backend/unit",
            "tests/backend/integration",
            "tests/backend/e2e",
            "tests/backend/performance",
            "tests/backend/fixtures",
            "tests/frontend",
            "tests/frontend/unit",
            "tests/frontend/integration",
            "tests/frontend/visual",
            # App-level tests
            "app/tests",
        ]

        for dir_path in test_dirs:
            full_path = project_root / dir_path
            assert full_path.exists(), f"Test directory '{dir_path}' does not exist"
            assert full_path.is_dir(), f"'{dir_path}' should be a directory"

    def test_documentation_directories_exist(self, project_root: Path):
        """
        Checks that all required documentation directories exist within the project.

        Args:
            project_root (Path): The root directory of the project.

        Raises:
            AssertionError: If any expected documentation directory is missing or is not a directory.

        Generated by CodeRabbit
        """
        doc_dirs = [
            "docs",
            "docs/api",
            "docs/architecture",
            "docs/deployment",
            "ai_docs",  # AI-specific documentation
        ]

        for dir_path in doc_dirs:
            full_path = project_root / dir_path
            assert (
                full_path.exists()
            ), f"Documentation directory '{dir_path}' does not exist"
            assert full_path.is_dir(), f"'{dir_path}' should be a directory"

    def test_infrastructure_directories_exist(self, project_root: Path):
        """
        Verifies that all required infrastructure and deployment-related directories exist within the project.

        Args:
            project_root (Path): The root directory of the project to check for infrastructure directories.

        Raises:
            AssertionError: If any required infrastructure directory does not exist or is not a directory.

        Generated by CodeRabbit
        """
        infra_dirs = [
            "infrastructure",
            "infrastructure/kubernetes",
            "infrastructure/kubernetes/base",
            "infrastructure/kubernetes/overlays",
            "infrastructure/terraform",
            "infrastructure/helm",
            "docker",
            "docker/backend",
            "docker/frontend",
            "scripts",
            "scripts/deployment",
            "scripts/backend",
            "scripts/frontend",
            "scripts/monitoring",
            ".github",
            ".github/workflows",
        ]

        for dir_path in infra_dirs:
            full_path = project_root / dir_path
            assert (
                full_path.exists()
            ), f"Infrastructure directory '{dir_path}' does not exist"
            assert full_path.is_dir(), f"'{dir_path}' should be a directory"


class TestPythonPackageStructure:
    """Test suite for Python package structure and imports."""

    def test_init_files_present_in_python_packages(self, project_root: Path):
        """
        Ensures that all Python package directories in the backend and test code contain an `__init__.py` file.

        Args:
            project_root (Path): The root directory of the project to scan for Python packages.

        Raises:
            AssertionError: If any Python package directory (excluding certain script or migration folders) is missing an `__init__.py` file.

        Example:
            test_instance.test_init_files_present_in_python_packages(Path("/path/to/project/root"))

        Generated by CodeRabbit
        """
        # Find all Python directories that should be packages
        python_dirs = []

        # Backend app directories
        app_path = project_root / "app"
        if app_path.exists():
            for dirpath, dirnames, filenames in os.walk(app_path):
                # Skip __pycache__ and other special directories
                dirnames[:] = [
                    d for d in dirnames if not d.startswith(("__pycache__", "."))
                ]

                # Check if directory contains Python files
                if any(f.endswith(".py") for f in filenames):
                    rel_path = Path(dirpath).relative_to(project_root)
                    python_dirs.append(rel_path)

        # Test directories
        tests_path = project_root / "tests"
        if tests_path.exists():
            for dirpath, dirnames, filenames in os.walk(tests_path):
                dirnames[:] = [
                    d for d in dirnames if not d.startswith(("__pycache__", "."))
                ]

                if any(f.endswith(".py") for f in filenames):
                    rel_path = Path(dirpath).relative_to(project_root)
                    python_dirs.append(rel_path)

        # Check each Python directory has __init__.py
        missing_init_files = []
        for dir_path in python_dirs:
            init_file = project_root / dir_path / "__init__.py"
            if not init_file.exists():
                # Some directories might legitimately not need __init__.py
                # (e.g., script directories, standalone test directories)
                parent_name = dir_path.name
                if parent_name not in ["scripts", "migrations", "alembic"]:
                    missing_init_files.append(str(dir_path))

        assert (
            not missing_init_files
        ), f"Missing __init__.py files in Python packages: {missing_init_files}"

    def test_core_modules_import_successfully(self, project_root: Path):
        """
        Attempts to import core backend modules to verify their presence and correct structure.

        Args:
            project_root (Path): The root directory of the project, used to locate module files and set the Python path.

        This test checks that essential backend modules (`app.core.config`, `app.core.database`, `app.core.security`, `app.models`, `app.utils`) exist and can be imported without structural errors. It adds the project root to `sys.path` if necessary, verifies the existence of each module or package, and attempts to import them. If a module cannot be imported due to a missing `app` package or similar structural issue, the test fails. Other import errors (such as missing dependencies) are ignored to focus on module structure.

        Generated by CodeRabbit
        """
        # Add project root to Python path
        if str(project_root) not in sys.path:
            sys.path.insert(0, str(project_root))

        # Core modules to test
        core_modules = [
            "app.core.config",
            "app.core.database",
            "app.core.security",
            "app.models",
            "app.utils",
        ]

        failed_imports = []
        for module_name in core_modules:
            try:
                # Check if module file exists first
                module_path = module_name.replace(".", "/") + ".py"
                if not (project_root / module_path).exists():
                    # Try as package __init__.py
                    module_path = module_name.replace(".", "/") + "/__init__.py"
                    if not (project_root / module_path).exists():
                        continue  # Skip if module doesn't exist

                importlib.import_module(module_name)
            except ImportError as e:
                failed_imports.append(f"{module_name}: {str(e)}")
            except Exception:
                # Catch other errors but don't fail the test
                # Some modules might have dependencies not installed in test env
                pass

        # We expect some imports might fail due to missing dependencies
        # Just ensure the module structure is correct
        for failure in failed_imports:
            if "No module named 'app'" in failure:
                pytest.fail(f"Module structure error: {failure}")


class TestCircularDependencies:
    """Test suite for detecting circular dependencies."""

    def _get_imports_from_file(self, file_path: Path) -> Set[str]:
        """
        Parses a Python file and extracts all imported module names.

        Args:
            file_path (Path): The path to the Python file to analyze.

        Returns:
            Set[str]: A set of module names that are imported in the file.

        Note:
            Ignores files with syntax errors or encoding issues.

        Generated by CodeRabbit
        """
        imports = set()

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                tree = ast.parse(f.read())

            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        imports.add(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        imports.add(node.module)
        except (SyntaxError, UnicodeDecodeError):
            # Skip files with syntax errors or encoding issues
            pass

        return imports

    def _build_dependency_graph(self, project_root: Path) -> Dict[str, Set[str]]:
        """
        Constructs a dependency graph mapping each Python module under the `app/` directory to its internal `app.` imports.

        Args:
            project_root (Path): The root directory of the project.

        Returns:
            Dict[str, Set[str]]: A dictionary where each key is a module name (as a dotted path) and each value is a set of internal `app.` module imports.

        Note:
            Test files and `__pycache__` directories are excluded from the graph.

        Generated by CodeRabbit
        """
        dependency_graph = {}

        # Scan app directory
        app_path = project_root / "app"
        if app_path.exists():
            for py_file in app_path.rglob("*.py"):
                # Skip test files and __pycache__
                if "__pycache__" in str(py_file) or "test_" in py_file.name:
                    continue

                # Convert file path to module name
                rel_path = py_file.relative_to(project_root)
                module_name = str(rel_path.with_suffix("")).replace("/", ".")

                # Get imports
                imports = self._get_imports_from_file(py_file)

                # Filter to only internal imports (starting with 'app.')
                internal_imports = {imp for imp in imports if imp.startswith("app.")}

                dependency_graph[module_name] = internal_imports

        return dependency_graph

    def _detect_cycles(self, graph: Dict[str, Set[str]]) -> List[List[str]]:
        """
        Detects all cycles in a module dependency graph using depth-first search (DFS).

        Args:
            graph (Dict[str, Set[str]]): A dictionary mapping module names to sets of module names they depend on.

        Returns:
            List[List[str]]: A list of cycles found, where each cycle is represented as a list of module names in the order they are traversed.

        Example:
            cycles = self._detect_cycles(graph)
            if cycles:
                print("Circular dependencies detected:", cycles)

        Generated by CodeRabbit
        """
        visited = set()
        rec_stack = set()
        cycles = []

        def dfs(node: str, path: List[str]) -> None:
            """
            Performs a depth-first search (DFS) on the dependency graph to detect cycles.

            Args:
                node (str): The current module being visited.
                path (List[str]): The path of modules visited so far in the current DFS traversal.

            Returns:
                None

            Raises:
                None

            Example:
                dfs('app.module_a', [])

            Generated by CodeRabbit
            """
            visited.add(node)
            rec_stack.add(node)
            path.append(node)

            # Get dependencies for this node
            dependencies = graph.get(node, set())

            for dep in dependencies:
                if dep not in visited:
                    dfs(dep, path.copy())
                elif dep in rec_stack:
                    # Found a cycle
                    cycle_start = path.index(dep)
                    cycle = path[cycle_start:] + [dep]
                    cycles.append(cycle)

            rec_stack.remove(node)

        # Check all nodes
        for node in graph:
            if node not in visited:
                dfs(node, [])

        return cycles

    def test_no_circular_dependencies_exist(self, project_root: Path):
        """
        Checks for and fails the test if any circular dependencies are found among Python modules in the codebase.

        Args:
            project_root (Path): The root directory of the project to analyze for circular dependencies.

        Raises:
            AssertionError: If one or more circular dependencies are detected, the test fails with details of the cycles found.

        Generated by CodeRabbit
        """
        # Build dependency graph
        dependency_graph = self._build_dependency_graph(project_root)

        # Detect cycles
        cycles = self._detect_cycles(dependency_graph)

        if cycles:
            # Format cycle information for better error message
            cycle_descriptions = []
            for cycle in cycles:
                cycle_str = " -> ".join(cycle)
                cycle_descriptions.append(cycle_str)

            pytest.fail(
                "Circular dependencies detected:\n" + "\n".join(cycle_descriptions)
            )


class TestProjectBestPractices:
    """Test suite for Python and JavaScript/TypeScript best practices."""

    def test_no_hardcoded_secrets(self, project_root: Path):
        """
        Checks all Python files in the project for potential hardcoded secrets such as API keys, passwords, or tokens.

        Args:
            project_root (Path): The root directory of the project to scan for hardcoded secrets.

        Raises:
            AssertionError: If any suspicious hardcoded secrets are detected in the codebase.

        Note:
            - Skips test files, certain scripts, and files that read secrets from environment variables or contain obvious placeholders.
            - Only flags assignments that appear to be actual hardcoded values.

        Generated by CodeRabbit
        """
        # Patterns that might indicate hardcoded secrets
        secret_patterns = [
            "api_key=",
            "secret_key=",
            "password=",
            "token=",
            "private_key=",
            "aws_access_key",
            "aws_secret_key",
        ]

        suspicious_files = []

        # Check Python files
        for py_file in project_root.rglob("*.py"):
            if "__pycache__" in str(py_file) or ".env" in str(py_file):
                continue

            # Skip test files as they often contain test credentials
            if "test_" in py_file.name or "tests/" in str(py_file):
                continue

            # Skip hook and script files that might process secrets
            if ".claude/hooks" in str(py_file) or "scripts/prepare-commit-msg" in str(
                py_file
            ):
                continue

            try:
                with open(py_file, "r", encoding="utf-8") as f:
                    content = f.read().lower()

                for pattern in secret_patterns:
                    if pattern in content:
                        # Check if it's just a variable name or actual assignment
                        lines = content.split("\n")
                        for i, line in enumerate(lines):
                            if pattern in line and "=" in line:
                                # Skip if it's reading from environment
                                if "os.environ" in line or "getenv" in line:
                                    continue
                                # Skip if it's a placeholder
                                if any(
                                    placeholder in line
                                    for placeholder in [
                                        "your_",
                                        "xxx",
                                        "placeholder",
                                        "example",
                                    ]
                                ):
                                    continue

                                suspicious_files.append(
                                    f"{py_file.relative_to(project_root)}:{i+1}"
                                )
            except Exception:
                pass

        assert (
            not suspicious_files
        ), f"Potential hardcoded secrets found in: {suspicious_files}"

    def test_python_files_have_docstrings(self, project_root: Path):
        """
        Checks that key Python modules and their classes contain docstrings.

        Args:
            project_root (Path): The root directory of the project.

        This test scans selected important backend Python modules for the presence of module-level and class-level docstrings. It collects any missing docstring warnings and prints them, but does not fail the test if docstrings are absent.

        Generated by CodeRabbit
        """
        missing_docstrings = []

        # Check main app modules
        important_modules = [
            "app/main.py",
            "app/core/config.py",
            "app/core/database.py",
            "app/core/security.py",
        ]

        for module_path in important_modules:
            file_path = project_root / module_path
            if not file_path.exists():
                continue

            try:
                with open(file_path, "r", encoding="utf-8") as f:
                    tree = ast.parse(f.read())

                # Check module docstring
                if not ast.get_docstring(tree):
                    missing_docstrings.append(
                        f"{module_path}: missing module docstring"
                    )

                # Check class docstrings
                for node in ast.walk(tree):
                    if isinstance(node, ast.ClassDef):
                        if not ast.get_docstring(node):
                            missing_docstrings.append(
                                f"{module_path}:{node.name}: missing class docstring"
                            )
            except Exception:
                pass

        # We don't fail on missing docstrings, just warn
        if missing_docstrings:
            print(f"Warning: Missing docstrings in: {missing_docstrings}")

    def test_consistent_file_naming(self, project_root: Path):
        """
        Checks that Python and TypeScript/JavaScript files follow consistent naming conventions within the project.

        Args:
            project_root (Path): The root directory of the project to scan for file naming conventions.

        Returns:
            None

        Example:
            test_consistent_file_naming(Path("/path/to/project"))

        Note:
            - Python files are expected to use snake_case (lowercase letters, digits, underscores).
            - TypeScript/JavaScript files are expected to use camelCase or PascalCase, with exceptions for certain config files.
            - Naming issues are reported as warnings and do not cause the test to fail.

        Generated by CodeRabbit
        """
        naming_issues = []

        # Python files should use snake_case
        for py_file in project_root.rglob("*.py"):
            if "__pycache__" in str(py_file):
                continue

            filename = py_file.stem
            # Skip special files
            if filename in ["__init__", "__main__"]:
                continue

            # Check for snake_case
            if not all(c.islower() or c.isdigit() or c == "_" for c in filename):
                naming_issues.append(
                    f"Python file should use snake_case: {py_file.relative_to(project_root)}"
                )

        # TypeScript/JavaScript files should use camelCase or PascalCase
        for ts_file in project_root.rglob("*.ts"):
            if "node_modules" in str(ts_file):
                continue

            filename = ts_file.stem
            # Config files can use different naming
            if filename in ["vite.config", "jest.config", "tsconfig"]:
                continue

            # Components typically use PascalCase, others use camelCase
            if not (filename[0].isupper() or filename[0].islower()):
                naming_issues.append(
                    f"TypeScript file has unconventional naming: {ts_file.relative_to(project_root)}"
                )

        # Report but don't fail on naming issues
        if naming_issues:
            print(f"Naming convention warnings: {naming_issues}")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
